{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "## LitPAD API built with Fiber and GORM\n\n### WEBSOCKETS:\n\n#### Notifications\n\n- URL: `wss://{host}/api/v1/ws/notifications`\n\n- Requires authorization, so pass in the Bearer Authorization header.\n\n- You can only read and not send notification messages into this socket.",
        "title": "LITPAD API",
        "contact": {},
        "version": "1.0"
    },
    "basePath": "/api/v1",
    "paths": {
        "/admin/books": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of books with support for pagination and optional filtering based on book title.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin | Books"
                ],
                "summary": "List Books with Pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Current Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Title of the book to filter by",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "First name, last name or username of the book author to filter by",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by highest ratings",
                        "name": "rating",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by Genre slug",
                        "name": "genre_slug",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by Tag slug",
                        "name": "tag_slug",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of books",
                        "schema": {
                            "$ref": "#/definitions/schemas.BooksResponseSchema"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/books/book-detail/{slug}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows an admin to view details of a book",
                "tags": [
                    "Admin | Books"
                ],
                "summary": "View Book Details",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Current Page (for reviews pagination)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Book slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.BookDetailResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/books/by-username/{username}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of a particular author books with support for pagination and optional filtering based on book title.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin | Books"
                ],
                "summary": "List Author Books with Pagination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the author",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Current Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Title of the book to filter by",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by highest ratings",
                        "name": "rating",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by Genre slug",
                        "name": "genre_slug",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by Tag slug",
                        "name": "tag_slug",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of books",
                        "schema": {
                            "$ref": "#/definitions/schemas.BooksResponseSchema"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/books/contracts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of book contracts with support for pagination and optional filtering based on contract status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin | Books"
                ],
                "summary": "List Book Contracts with Pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Current Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name of the author to filter by",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "PENDING",
                            "APPROVED",
                            "DECLINED",
                            "UPDATED"
                        ],
                        "type": "string",
                        "description": "status of the contract to filter by",
                        "name": "contract_status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of book contracts",
                        "schema": {
                            "$ref": "#/definitions/schemas.ContractsResponseSchema"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/books/genres": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new genre to the app.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin | Books"
                ],
                "summary": "Add Genre",
                "parameters": [
                    {
                        "description": "Genre",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.GenreAddSchema"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Genre Added Successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/books/genres/{slug}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a genre.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin | Books"
                ],
                "summary": "Update Genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Genre",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.GenreAddSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Genre Updated Successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a genre.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin | Books"
                ],
                "summary": "Delete Genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Genre slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Genre Deleted Successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/books/tags": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new tag to the app.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin | Books"
                ],
                "summary": "Add Tag",
                "parameters": [
                    {
                        "description": "Tag",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.TagsAddSchema"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Tag added successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/books/tags/{slug}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a tag to the app.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin | Books"
                ],
                "summary": "Update Tag",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tag slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Tag",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.TagsAddSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag updated successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a tag from the app.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin | Books"
                ],
                "summary": "Delete Tag",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tag slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag delete successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/payments/transactions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of current transactions with support for pagination and optional filtering based on username.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin | Payments"
                ],
                "summary": "Latest Transactions with Pagination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username to filter by",
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Current page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of transactions",
                        "schema": {
                            "$ref": "#/definitions/schemas.TransactionsResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of user profiles with support for pagination and optional filtering based on user account type.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin | Users"
                ],
                "summary": "List Users with Pagination",
                "parameters": [
                    {
                        "enum": [
                            "READER",
                            "WRITER",
                            "ADMIN"
                        ],
                        "type": "string",
                        "description": "Type of user to filter by",
                        "name": "account_type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Current page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of user profiles",
                        "schema": {
                            "$ref": "#/definitions/schemas.UserProfilesResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/{username}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the account type of a specified user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin | Users"
                ],
                "summary": "Update User Role",
                "parameters": [
                    {
                        "type": "string",
                        "default": "username",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User role update data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.UpdateUserRoleSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user details",
                        "schema": {
                            "$ref": "#/definitions/schemas.UserProfileResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/{username}/toggle-activation": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows the admin to deactivate/reactivate a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin | Users"
                ],
                "summary": "Reactivate/Deactivate User",
                "parameters": [
                    {
                        "type": "string",
                        "default": "username",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/facebook": {
            "post": {
                "description": "`This endpoint generates new access and refresh tokens for authentication via facebook`\n`Pass in token gotten from facebook client authentication here in payload to retrieve tokens for authorization`",
                "tags": [
                    "Auth"
                ],
                "summary": "Login a user via facebook",
                "parameters": [
                    {
                        "description": "User login",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.SocialLoginSchema"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/schemas.LoginResponseSchema"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/google": {
            "post": {
                "description": "`This endpoint generates new access and refresh tokens for authentication via google`\n`Pass in token gotten from gsi client authentication here in payload to retrieve tokens for authorization`",
                "tags": [
                    "Auth"
                ],
                "summary": "Login a user via google",
                "parameters": [
                    {
                        "description": "User login",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.SocialLoginSchema"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/schemas.LoginResponseSchema"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "This endpoint generates new access and refresh tokens for authentication",
                "tags": [
                    "Auth"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User login",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.LoginSchema"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/schemas.LoginResponseSchema"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint logs a user out from our application",
                "tags": [
                    "Auth"
                ],
                "summary": "Logout a user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "This endpoint refresh tokens by generating new access and refresh tokens for a user",
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh tokens",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "refresh",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.RefreshTokenSchema"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/schemas.LoginResponseSchema"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "`This endpoint registers new users into our application.`",
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.RegisterUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/schemas.RegisterResponseSchema"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/resend-verification-email": {
            "post": {
                "description": "`This endpoint resends new otp to the user's email.`",
                "tags": [
                    "Auth"
                ],
                "summary": "Resend Verification Email",
                "parameters": [
                    {
                        "description": "Email data",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.EmailRequestSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/send-password-reset-otp": {
            "post": {
                "description": "`This endpoint sends new password reset link to the user's email.`",
                "tags": [
                    "Auth"
                ],
                "summary": "Send Password Reset Link",
                "parameters": [
                    {
                        "description": "Email object",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.EmailRequestSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/set-new-password": {
            "post": {
                "description": "`This endpoint verifies the password reset token and set new password.`",
                "tags": [
                    "Auth"
                ],
                "summary": "Set New Password",
                "parameters": [
                    {
                        "description": "Password reset object",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.SetNewPasswordSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/verify-email": {
            "post": {
                "description": "`This endpoint verifies a user's email.`",
                "tags": [
                    "Auth"
                ],
                "summary": "Verify a user's email",
                "parameters": [
                    {
                        "description": "Verify Email object",
                        "name": "verify_email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.VerifyEmailRequestSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/verify-password-reset-token/{token_string}": {
            "get": {
                "description": "`This endpoint checks the validity of a password reset token.`",
                "tags": [
                    "Auth"
                ],
                "summary": "Check Password Reset Token Validity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token string",
                        "name": "token_string",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books": {
            "get": {
                "description": "This endpoint views a latest books",
                "tags": [
                    "Books"
                ],
                "summary": "View Latest Books",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Current Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by Genre slug",
                        "name": "genre_slug",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by Tag slug",
                        "name": "tag_slug",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.BooksResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows a writer to create a book",
                "tags": [
                    "Books"
                ],
                "summary": "Create A Book",
                "parameters": [
                    {
                        "enum": [
                            4,
                            12,
                            16,
                            18
                        ],
                        "type": "integer",
                        "x-enum-varnames": [
                            "ATYPE_FOUR",
                            "ATYPE_TWELVE",
                            "ATYPE_SIXTEEN",
                            "ATYPE_EIGHTEEN"
                        ],
                        "name": "age_discretion",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 200,
                        "type": "string",
                        "name": "blurb",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "genre_slug",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "tag_slugs",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 200,
                        "type": "string",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Cover Image to upload",
                        "name": "cover_image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/schemas.BookResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/author/{username}": {
            "get": {
                "description": "This endpoint views a latest books by an author",
                "tags": [
                    "Books"
                ],
                "summary": "View Latest Books By A Particular Author",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Current Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by Author Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by Genre slug",
                        "name": "genre_slug",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by Tag slug",
                        "name": "tag_slug",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.BooksResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/book/chapter/{slug}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "`This endpoint allows a writer to update a chapter in his/her book`\n`Chapter status: DRAFT, PUBLISHED, TRASH`",
                "tags": [
                    "Books"
                ],
                "summary": "Update A Chapter of a Book",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chapter slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Chapter object",
                        "name": "chapter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.ChapterCreateSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ChapterResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows a writer to delete a chapter from a book",
                "tags": [
                    "Books"
                ],
                "summary": "Delete A Chapter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chapter slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/book/review/replies/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "`This endpoint allows a user to edit his/her reply`",
                "tags": [
                    "Books"
                ],
                "summary": "Edit A Reply",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reply id (uuid)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Reply object",
                        "name": "review",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.ReplyReviewSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ReplyResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "`This endpoint allows a user to delete his/her reply`",
                "tags": [
                    "Books"
                ],
                "summary": "Delete A Reply",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reply id (uuid)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/book/review/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "`This endpoint allows a user to edit his/her book review.`",
                "tags": [
                    "Books"
                ],
                "summary": "Edit Book Review",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Review id (uuid)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Review object",
                        "name": "review",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.ReviewBookSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ReviewResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "`This endpoint allows a user to delete his/her book review.`",
                "tags": [
                    "Books"
                ],
                "summary": "Delete Book Review",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Review id (uuid)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/book/review/{id}/replies": {
            "get": {
                "description": "`This endpoint returns replies of a book review.`",
                "tags": [
                    "Books"
                ],
                "summary": "Get Review Replies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Review id (uuid)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Current Page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.RepliesResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "`This endpoint allows a user to reply a book review.`",
                "tags": [
                    "Books"
                ],
                "summary": "Reply A Review",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Review id (uuid)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Reply object",
                        "name": "review",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.ReplyReviewSchema"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/schemas.ReplyResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/book/{slug}": {
            "get": {
                "description": "This endpoint views a single book",
                "tags": [
                    "Books"
                ],
                "summary": "View Single Book",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Current Page (for reviews pagination)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Book slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.BookDetailResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows a writer to update a book",
                "tags": [
                    "Books"
                ],
                "summary": "Update A Book",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Book slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            4,
                            12,
                            16,
                            18
                        ],
                        "type": "integer",
                        "x-enum-varnames": [
                            "ATYPE_FOUR",
                            "ATYPE_TWELVE",
                            "ATYPE_SIXTEEN",
                            "ATYPE_EIGHTEEN"
                        ],
                        "name": "age_discretion",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 200,
                        "type": "string",
                        "name": "blurb",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "genre_slug",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "tag_slugs",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 200,
                        "type": "string",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Cover Image to upload",
                        "name": "cover_image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.BookResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "`This endpoint allows a user to review a book.`\n`The author cannot review his own book.`\n`Only the reader who has bought the book can review the book.`\n`A reader cannot add multiple reviews to a book.`",
                "tags": [
                    "Books"
                ],
                "summary": "Review A Book",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Book slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Review object",
                        "name": "review",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.ReviewBookSchema"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/schemas.ReviewResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows a writer to delete a book",
                "tags": [
                    "Books"
                ],
                "summary": "Delete A Book",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Book slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/book/{slug}/add-chapter": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "`This endpoint allows a writer to add a chapter to his/her book`\n`Chapter status: DRAFT, PUBLISHED, TRASH`",
                "tags": [
                    "Books"
                ],
                "summary": "Add A Chapter to a Book",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Book slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Chapter object",
                        "name": "chapter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.ChapterCreateSchema"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/schemas.ChapterResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/book/{slug}/buy": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows a user to buy an entire book",
                "tags": [
                    "Books"
                ],
                "summary": "Buy An Entire Book",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Book slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/schemas.BookResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/book/{slug}/buy-chapter": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "`This endpoint allows a user to buy the next chapter of a book.`\n`It happens in sequence. 1, 2, 3, 4 etc. That means if a user has bought chapter 2 before. This endpoint will buy chapter 3`",
                "tags": [
                    "Books"
                ],
                "summary": "Buy A Chapter Of A Book",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Book slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/schemas.BookResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/book/{slug}/chapters": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "`This endpoint views chapters of a book`\n`A Guest user will view just the first chapter`\n`An Authenticated user will view all the chapters he has bought`\n`The owner will view all chapters of the book`",
                "tags": [
                    "Books"
                ],
                "summary": "View Book Chapters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Get Chapter by Book Slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Current Page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ChaptersResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/book/{slug}/set-contract": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "`This endpoint allows a user to create/update a contract for his/her book`",
                "tags": [
                    "Books"
                ],
                "summary": "Set Contract",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Book slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maxLength": 1000,
                        "type": "string",
                        "name": "address",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "name": "age",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "name": "average_chapter",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "book_availability_link",
                        "in": "formData"
                    },
                    {
                        "maxLength": 1000,
                        "type": "string",
                        "name": "city",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 1000,
                        "type": "string",
                        "name": "country",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 1000,
                        "type": "string",
                        "name": "full_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "name": "full_purchase_mode",
                        "in": "formData"
                    },
                    {
                        "enum": [
                            "DRIVERS-LICENSE",
                            "GOVERNMENT-ID",
                            "PASSPORT"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "CID_DRIVERS_LICENSE",
                            "CID_GOVERNMENT_ID",
                            "CID_PASSPORT"
                        ],
                        "name": "id_type",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "enum": [
                            "EXCLUSIVE",
                            "NON-EXCLUSIVE",
                            "ONLY-EXCLUSIVE"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "CT_EXCLUSIVE",
                            "CT_NON_EXCLUSIVE",
                            "CT_ONLY_EXCLUSIVE"
                        ],
                        "name": "intended_contract",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "outline",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 1000,
                        "type": "string",
                        "name": "pen_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "name": "planned_length",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "name": "postal_code",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 1000,
                        "type": "string",
                        "name": "state",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "synopsis",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 20,
                        "type": "string",
                        "name": "telephone_number",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "name": "update_rate",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Front Image of your id",
                        "name": "id_front_image",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Back Image of your id",
                        "name": "id_back_image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ContractResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/book/{slug}/vote": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows a user to vote a book",
                "tags": [
                    "Books"
                ],
                "summary": "Vote A Book",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Book slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/bought": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns all books in which a user has bought at least a chapter",
                "tags": [
                    "Books"
                ],
                "summary": "View Bought Books",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Current Page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.BooksResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/genres": {
            "get": {
                "description": "This endpoint views available book genres",
                "tags": [
                    "Books"
                ],
                "summary": "View Available Book Genres",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.GenresResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/lanterns-generation/{amount}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows a user to convert coins to lanterns",
                "tags": [
                    "Books"
                ],
                "summary": "Convert Coins To Lanterns",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Amount to convert",
                        "name": "amount",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/tags": {
            "get": {
                "description": "This endpoint views available book tags",
                "tags": [
                    "Books"
                ],
                "summary": "View Available Book Tags",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.TagsResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/general/site-detail": {
            "get": {
                "description": "This endpoint retrieves few details of the site/application.",
                "tags": [
                    "General"
                ],
                "summary": "Retrieve site details",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.SiteDetailResponseSchema"
                        }
                    }
                }
            }
        },
        "/general/subscribe": {
            "post": {
                "description": "This endpoint creates a newsletter subscriber in our application",
                "tags": [
                    "General"
                ],
                "summary": "Add a subscriber",
                "parameters": [
                    {
                        "description": "Subscriber object",
                        "name": "subscriber",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Subscriber"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/schemas.SubscriberResponseSchema"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gifts": {
            "get": {
                "description": "This endpoint shows a user gifts that can be sent",
                "tags": [
                    "Gifts"
                ],
                "summary": "View All Available Gifts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.GiftsResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gifts/sent": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows a writer to view all gifts that was sent to him/her",
                "tags": [
                    "Gifts"
                ],
                "summary": "View All Gifts Sent To A Writer",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Current Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by claimed value: CLAIMED or NOT_CLAIMED ",
                        "name": "claimed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.SentGiftsResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gifts/sent/{id}/claim": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows a writer to claim a gift",
                "tags": [
                    "Gifts"
                ],
                "summary": "Claim Gift",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the sent gift (uuid)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.SentGiftResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gifts/{username}/{gift_slug}/send/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows a user to send a gift",
                "tags": [
                    "Gifts"
                ],
                "summary": "Send Gift",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the writer",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Slug of the gift being sent",
                        "name": "gift_slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/schemas.SentGiftResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/healthcheck": {
            "get": {
                "description": "This endpoint checks the health of our application.",
                "tags": [
                    "HealthCheck"
                ],
                "summary": "HealthCheck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.HealthCheckSchema"
                        }
                    }
                }
            }
        },
        "/profiles/notifications": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows a user to view his/her notificatios",
                "tags": [
                    "Profiles"
                ],
                "summary": "View Notifications",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.NotificationsResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profiles/notifications/read": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows a user to read his/her notification.",
                "tags": [
                    "Profiles"
                ],
                "summary": "Read Notification",
                "parameters": [
                    {
                        "description": "Notification Read object",
                        "name": "notification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.ReadNotificationSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profiles/profile/{username}": {
            "get": {
                "description": "This endpoint views a user profile",
                "tags": [
                    "Profiles"
                ],
                "summary": "View User Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of user",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.UserProfileResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profiles/profile/{username}/follow": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "`This endpoint allows a user to follow or unfollow a writer`.",
                "tags": [
                    "Profiles"
                ],
                "summary": "Toggle Follow Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the user to follow or unfollow",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Returns an error for invalid request parameters.",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Returns an error when trying to follow a user that isn't a writer",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Returns an error when either the user to follow or the follower user does not exist.",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Returns an error when there is an internal server error or a transaction fails.",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profiles/update": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint updates a user's profile",
                "tags": [
                    "Profiles"
                ],
                "summary": "Update User Profile",
                "parameters": [
                    {
                        "description": "Profile object",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.UpdateUserProfileSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.UserProfileResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profiles/update-password": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint updates a user's password",
                "tags": [
                    "Profiles"
                ],
                "summary": "Update User Password",
                "parameters": [
                    {
                        "description": "Password object",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.UpdatePasswordSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/waitlist": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a user to the waitlist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Waitlist"
                ],
                "summary": "Add to Waitlist",
                "parameters": [
                    {
                        "description": "Waitlist data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.AddToWaitlist"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added to waitlist",
                        "schema": {
                            "$ref": "#/definitions/schemas.WaitlistResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Invalid Genre ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallet/coins": {
            "get": {
                "description": "This endpoint returns all available coins for sale",
                "tags": [
                    "Wallet"
                ],
                "summary": "View Available Coins",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.CoinsResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows a user to buy coins",
                "tags": [
                    "Wallet"
                ],
                "summary": "Buy Coins",
                "parameters": [
                    {
                        "description": "Payment object",
                        "name": "coin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.BuyCoinSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.PaymentResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallet/icp": {
            "post": {
                "description": "`This endpoint creates a new ICP wallet`",
                "tags": [
                    "Wallet"
                ],
                "summary": "Create a new ICP wallet",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CreateICPWallet"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallet/icp/{username}/balance": {
            "get": {
                "description": "This endpoint returns user ICP wallet balance",
                "tags": [
                    "Wallet"
                ],
                "summary": "Get user ICP wallet balance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of user",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallet/plans": {
            "get": {
                "description": "Retrieves a list of available subscription plans.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "List Available Subscription Plans",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of plans",
                        "schema": {
                            "$ref": "#/definitions/schemas.SubscriptionPlansResponseSchema"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows an admin to change the amount of a plan",
                "tags": [
                    "Wallet"
                ],
                "summary": "Update A Plan Amount",
                "parameters": [
                    {
                        "description": "Plan data",
                        "name": "plan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.SubscriptionPlanSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.SubscriptionPlanResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallet/subscription": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows a user to create a subscription for books",
                "tags": [
                    "Wallet"
                ],
                "summary": "Subscribe",
                "parameters": [
                    {
                        "description": "Payment object",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CreateSubscriptionSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.PaymentResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallet/transactions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns all transactions of a user",
                "tags": [
                    "Wallet"
                ],
                "summary": "View Current Transactions",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Current Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Payment Status",
                        "name": "payment_status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.TransactionsResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "choices.AccType": {
            "type": "string",
            "enum": [
                "READER",
                "AUTHOR"
            ],
            "x-enum-varnames": [
                "ACCTYPE_READER",
                "ACCTYPE_AUTHOR"
            ]
        },
        "choices.AgeType": {
            "type": "integer",
            "enum": [
                4,
                12,
                16,
                18
            ],
            "x-enum-varnames": [
                "ATYPE_FOUR",
                "ATYPE_TWELVE",
                "ATYPE_SIXTEEN",
                "ATYPE_EIGHTEEN"
            ]
        },
        "choices.ChapterStatus": {
            "type": "string",
            "enum": [
                "DRAFT",
                "PUBLISHED",
                "TRASH"
            ],
            "x-enum-varnames": [
                "CS_DRAFT",
                "CS_PUBLISHED",
                "CS_TRASH"
            ]
        },
        "choices.ContractIDTypeChoice": {
            "type": "string",
            "enum": [
                "DRIVERS-LICENSE",
                "GOVERNMENT-ID",
                "PASSPORT"
            ],
            "x-enum-varnames": [
                "CID_DRIVERS_LICENSE",
                "CID_GOVERNMENT_ID",
                "CID_PASSPORT"
            ]
        },
        "choices.ContractStatusChoice": {
            "type": "string",
            "enum": [
                "PENDING",
                "APPROVED",
                "DECLINED",
                "UPDATED"
            ],
            "x-enum-varnames": [
                "CTS_PENDING",
                "CTS_APPROVED",
                "CTS_DECLINED",
                "CTS_UPDATED"
            ]
        },
        "choices.ContractTypeChoice": {
            "type": "string",
            "enum": [
                "EXCLUSIVE",
                "NON-EXCLUSIVE",
                "ONLY-EXCLUSIVE"
            ],
            "x-enum-varnames": [
                "CT_EXCLUSIVE",
                "CT_NON_EXCLUSIVE",
                "CT_ONLY_EXCLUSIVE"
            ]
        },
        "choices.NotificationTypeChoice": {
            "type": "string",
            "enum": [
                "LIKE",
                "REPLY",
                "FOLLOWING",
                "BOOK_PURCHASE",
                "GIFT",
                "REVIEW",
                "VOTE"
            ],
            "x-enum-varnames": [
                "NT_LIKE",
                "NT_REPLY",
                "NT_FOLLOWING",
                "NT_BOOK_PURCHASE",
                "NT_GIFT",
                "NT_REVIEW",
                "NT_VOTE"
            ]
        },
        "choices.PaymentPurpose": {
            "type": "string",
            "enum": [
                "COINS",
                "SUBSCRIPTION"
            ],
            "x-enum-varnames": [
                "PP_COINS",
                "PP_SUB"
            ]
        },
        "choices.PaymentStatus": {
            "type": "string",
            "enum": [
                "PENDING",
                "SUCCEEDED",
                "FAILED",
                "CANCELED"
            ],
            "x-enum-varnames": [
                "PSPENDING",
                "PSSUCCEEDED",
                "PSFAILED",
                "PSCANCELED"
            ]
        },
        "choices.PaymentType": {
            "type": "string",
            "enum": [
                "GOOGLE PAY",
                "STRIPE",
                "PAYPAL"
            ],
            "x-enum-varnames": [
                "PTYPE_GPAY",
                "PTYPE_STRIPE",
                "PTYPE_PAYPAL"
            ]
        },
        "choices.RatingChoice": {
            "type": "integer",
            "enum": [
                1,
                2,
                3,
                4,
                5
            ],
            "x-enum-varnames": [
                "RC_1",
                "RC_2",
                "RC_3",
                "RC_4",
                "RC_5"
            ]
        },
        "choices.SubscriptionTypeChoice": {
            "type": "string",
            "enum": [
                "MONTHLY",
                "ANNUAL"
            ],
            "x-enum-varnames": [
                "ST_MONTHLY",
                "ST_ANNUAL"
            ]
        },
        "models.SiteDetail": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "234, Lagos, Nigeria"
                },
                "email": {
                    "type": "string",
                    "example": "litpad@gmail.com"
                },
                "fb": {
                    "type": "string",
                    "example": "https://facebook.com"
                },
                "ig": {
                    "type": "string",
                    "example": "https://instagram.com"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string",
                    "example": "+234345434343"
                },
                "tw": {
                    "type": "string",
                    "example": "https://twitter.com"
                },
                "wh": {
                    "type": "string",
                    "example": "https://wa.me/2348133831036"
                }
            }
        },
        "models.Subscriber": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "minLength": 5,
                    "example": "johndoe@email.com"
                }
            }
        },
        "routes.HealthCheckSchema": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string",
                    "example": "pong"
                }
            }
        },
        "schemas.AddToWaitlist": {
            "type": "object",
            "required": [
                "email",
                "genre_slug",
                "name"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                },
                "genre_slug": {
                    "type": "string",
                    "example": "werewolf"
                },
                "name": {
                    "type": "string",
                    "maxLength": 1000,
                    "minLength": 3,
                    "example": "John Doe"
                }
            }
        },
        "schemas.BookDetailResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.BookDetailSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.BookDetailSchema": {
            "type": "object",
            "properties": {
                "age_discretion": {
                    "$ref": "#/definitions/choices.AgeType"
                },
                "author": {
                    "$ref": "#/definitions/schemas.UserDataSchema"
                },
                "avg_rating": {
                    "type": "number"
                },
                "blurb": {
                    "type": "string"
                },
                "chapter_price": {
                    "type": "integer"
                },
                "chapters_count": {
                    "type": "integer"
                },
                "cover_image": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-06-05T02:32:34.462196+01:00"
                },
                "full_price": {
                    "type": "integer"
                },
                "genre": {
                    "$ref": "#/definitions/schemas.GenreWithoutTagSchema"
                },
                "partial_view_chapter": {
                    "$ref": "#/definitions/schemas.ChapterSchema"
                },
                "reviews": {
                    "$ref": "#/definitions/schemas.ReviewsResponseDataSchema"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.TagSchema"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-06-05T02:32:34.462196+01:00"
                },
                "views": {
                    "type": "integer"
                },
                "votes": {
                    "type": "integer"
                },
                "word_count": {
                    "type": "integer"
                }
            }
        },
        "schemas.BookResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.BookSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.BookSchema": {
            "type": "object",
            "properties": {
                "age_discretion": {
                    "$ref": "#/definitions/choices.AgeType"
                },
                "author": {
                    "$ref": "#/definitions/schemas.UserDataSchema"
                },
                "avg_rating": {
                    "type": "number"
                },
                "blurb": {
                    "type": "string"
                },
                "chapter_price": {
                    "type": "integer"
                },
                "chapters_count": {
                    "type": "integer"
                },
                "cover_image": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-06-05T02:32:34.462196+01:00"
                },
                "full_price": {
                    "type": "integer"
                },
                "genre": {
                    "$ref": "#/definitions/schemas.GenreWithoutTagSchema"
                },
                "partial_view_chapter": {
                    "$ref": "#/definitions/schemas.ChapterSchema"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.TagSchema"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-06-05T02:32:34.462196+01:00"
                },
                "views": {
                    "type": "integer"
                },
                "votes": {
                    "type": "integer"
                },
                "word_count": {
                    "type": "integer"
                }
            }
        },
        "schemas.BooksResponseDataSchema": {
            "type": "object",
            "properties": {
                "books": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.BookSchema"
                    }
                },
                "current_page": {
                    "type": "integer",
                    "example": 1
                },
                "last_page": {
                    "type": "integer",
                    "example": 100
                },
                "per_page": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "schemas.BooksResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.BooksResponseDataSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.BuyCoinSchema": {
            "type": "object",
            "required": [
                "coin_id",
                "quantity"
            ],
            "properties": {
                "coin_id": {
                    "type": "string",
                    "example": "19e8bd22-fab1-4bb4-ba82-77c41bea6b99"
                },
                "quantity": {
                    "description": "PaymentType choices.PaymentType `json:\"payment_type\" validate:\"required,payment_type_validator\" example:\"STRIPE\"` // This should be stripe by default",
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "schemas.ChapterCreateSchema": {
            "type": "object",
            "required": [
                "chapter_status",
                "text",
                "title"
            ],
            "properties": {
                "chapter_status": {
                    "$ref": "#/definitions/choices.ChapterStatus"
                },
                "text": {
                    "type": "string",
                    "maxLength": 10000
                },
                "title": {
                    "type": "string",
                    "maxLength": 100
                }
            }
        },
        "schemas.ChapterResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.ChapterSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.ChapterSchema": {
            "type": "object",
            "properties": {
                "chapter_status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/choices.ChapterStatus"
                        }
                    ],
                    "example": "PUBLISHED"
                },
                "slug": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "word_count": {
                    "type": "integer"
                }
            }
        },
        "schemas.ChaptersResponseDataSchema": {
            "type": "object",
            "properties": {
                "chapters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.ChapterSchema"
                    }
                },
                "current_page": {
                    "type": "integer",
                    "example": 1
                },
                "last_page": {
                    "type": "integer",
                    "example": 100
                },
                "per_page": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "schemas.ChaptersResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.ChaptersResponseDataSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.CoinSchema": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer",
                    "example": 5
                },
                "id": {
                    "type": "string",
                    "example": "19e8bd22-fab1-4bb4-ba82-77c41bea6b99"
                },
                "price": {
                    "type": "number",
                    "example": 10.45
                }
            }
        },
        "schemas.CoinsResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.CoinSchema"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.ContractResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.ContractSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.ContractSchema": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "age": {
                    "type": "integer"
                },
                "average_chapter": {
                    "type": "integer"
                },
                "book_availability_link": {
                    "type": "string"
                },
                "chapter_price": {
                    "type": "integer"
                },
                "city": {
                    "type": "string"
                },
                "contract_status": {
                    "$ref": "#/definitions/choices.ContractStatusChoice"
                },
                "country": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "full_price": {
                    "type": "integer"
                },
                "full_purchase_mode": {
                    "type": "boolean"
                },
                "id_back_image": {
                    "type": "string"
                },
                "id_front_image": {
                    "type": "string"
                },
                "id_type": {
                    "$ref": "#/definitions/choices.ContractIDTypeChoice"
                },
                "intended_contract": {
                    "$ref": "#/definitions/choices.ContractTypeChoice"
                },
                "outline": {
                    "type": "string"
                },
                "pen_name": {
                    "type": "string"
                },
                "planned_length": {
                    "type": "integer"
                },
                "postal_code": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "synopsis": {
                    "type": "string"
                },
                "telephone_number": {
                    "type": "string"
                },
                "update_rate": {
                    "type": "integer"
                }
            }
        },
        "schemas.ContractsResponseDataSchema": {
            "type": "object",
            "properties": {
                "contracts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.ContractSchema"
                    }
                },
                "current_page": {
                    "type": "integer",
                    "example": 1
                },
                "last_page": {
                    "type": "integer",
                    "example": 100
                },
                "per_page": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "schemas.ContractsResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.ContractsResponseDataSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.CreateICPWallet": {
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "username": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "john-doe"
                }
            }
        },
        "schemas.CreateSubscriptionSchema": {
            "type": "object",
            "required": [
                "payment_method_token",
                "subtype"
            ],
            "properties": {
                "payment_method_token": {
                    "type": "string"
                },
                "subtype": {
                    "$ref": "#/definitions/choices.SubscriptionTypeChoice"
                }
            }
        },
        "schemas.EmailRequestSchema": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "minLength": 5,
                    "example": "johndoe@email.com"
                }
            }
        },
        "schemas.FollowerData": {
            "type": "object",
            "properties": {
                "account_type": {
                    "$ref": "#/definitions/choices.AccType"
                },
                "avatar": {
                    "type": "string"
                },
                "followers_count": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "stories_count": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "schemas.GenreAddSchema": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "tag_slugs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "schemas.GenreSchema": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.TagSchema"
                    }
                }
            }
        },
        "schemas.GenreWithoutTagSchema": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "schemas.GenresResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.GenreSchema"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.GiftSchema": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string",
                    "example": "https://img.url"
                },
                "lanterns": {
                    "type": "integer",
                    "example": 2
                },
                "name": {
                    "type": "string",
                    "example": "Red rose"
                },
                "price": {
                    "type": "integer",
                    "example": 500
                },
                "slug": {
                    "type": "string",
                    "example": "red-rose"
                }
            }
        },
        "schemas.GiftsResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.GiftSchema"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.LoginResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.TokensResponseSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.LoginSchema": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "johndoe@email.com"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                }
            }
        },
        "schemas.NotificationBookSchema": {
            "type": "object",
            "properties": {
                "cover_image": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "schemas.NotificationSchema": {
            "type": "object",
            "properties": {
                "book": {
                    "description": "Bought book, vote, comment and reply",
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemas.NotificationBookSchema"
                        }
                    ]
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-06-05T02:32:34.462196+01:00"
                },
                "id": {
                    "type": "string",
                    "example": "2b3bd817-135e-41bd-9781-33807c92ff40"
                },
                "is_read": {
                    "type": "boolean"
                },
                "ntype": {
                    "$ref": "#/definitions/choices.NotificationTypeChoice"
                },
                "receiver_id": {
                    "type": "string"
                },
                "reply_id": {
                    "description": "If someone liked your reply",
                    "type": "string",
                    "example": "2b3bd817-135e-41bd-9781-33807c92ff40"
                },
                "review_id": {
                    "description": "reviewed, reply, like",
                    "type": "string",
                    "example": "2b3bd817-135e-41bd-9781-33807c92ff40"
                },
                "sender": {
                    "$ref": "#/definitions/schemas.UserDataSchema"
                },
                "sent_gift_id": {
                    "description": "If someone sent you a gift",
                    "type": "string",
                    "example": "2b3bd817-135e-41bd-9781-33807c92ff40"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "schemas.NotificationsResponseDataSchema": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer",
                    "example": 1
                },
                "last_page": {
                    "type": "integer",
                    "example": 100
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.NotificationSchema"
                    }
                },
                "per_page": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "schemas.NotificationsResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.NotificationsResponseDataSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.PaymentResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.TransactionSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.ReadNotificationSchema": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "d10dde64-a242-4ed0-bd75-4c759644b3a6"
                },
                "mark_all_as_read": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "schemas.RefreshTokenSchema": {
            "type": "object",
            "required": [
                "refresh"
            ],
            "properties": {
                "refresh": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6InNpbXBsZWlkIiwiZXhwIjoxMjU3ODk0MzAwfQ.Ys_jP70xdxch32hFECfJQuvpvU5_IiTIN2pJJv68EqQ"
                }
            }
        },
        "schemas.RegisterResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.EmailRequestSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.RegisterUser": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "minLength": 5,
                    "example": "johndoe@email.com"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "John"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "Doe"
                },
                "password": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 8,
                    "example": "strongpassword"
                },
                "terms_agreement": {
                    "type": "boolean"
                },
                "username": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "john-doe"
                }
            }
        },
        "schemas.RepliesResponseDataSchema": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer",
                    "example": 1
                },
                "last_page": {
                    "type": "integer",
                    "example": 100
                },
                "per_page": {
                    "type": "integer",
                    "example": 100
                },
                "replies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.ReplySchema"
                    }
                }
            }
        },
        "schemas.RepliesResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.RepliesResponseDataSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.ReplyResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.ReplySchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.ReplyReviewSchema": {
            "type": "object",
            "required": [
                "text"
            ],
            "properties": {
                "text": {
                    "type": "string",
                    "maxLength": 10000
                }
            }
        },
        "schemas.ReplySchema": {
            "type": "object",
            "required": [
                "text"
            ],
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-06-05T02:32:34.462196+01:00"
                },
                "id": {
                    "type": "string",
                    "example": "2b3bd817-135e-41bd-9781-33807c92ff40"
                },
                "likes_count": {
                    "type": "integer"
                },
                "text": {
                    "type": "string",
                    "maxLength": 10000
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-06-05T02:32:34.462196+01:00"
                },
                "user": {
                    "$ref": "#/definitions/schemas.UserDataSchema"
                }
            }
        },
        "schemas.ResponseSchema": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.ReviewBookSchema": {
            "type": "object",
            "required": [
                "rating",
                "text"
            ],
            "properties": {
                "rating": {
                    "$ref": "#/definitions/choices.RatingChoice"
                },
                "text": {
                    "type": "string",
                    "maxLength": 10000
                }
            }
        },
        "schemas.ReviewResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.ReviewSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.ReviewSchema": {
            "type": "object",
            "required": [
                "rating",
                "text"
            ],
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-06-05T02:32:34.462196+01:00"
                },
                "id": {
                    "type": "string",
                    "example": "2b3bd817-135e-41bd-9781-33807c92ff40"
                },
                "likes_count": {
                    "type": "integer"
                },
                "rating": {
                    "$ref": "#/definitions/choices.RatingChoice"
                },
                "replies_count": {
                    "type": "integer"
                },
                "text": {
                    "type": "string",
                    "maxLength": 10000
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-06-05T02:32:34.462196+01:00"
                },
                "user": {
                    "$ref": "#/definitions/schemas.UserDataSchema"
                }
            }
        },
        "schemas.ReviewsResponseDataSchema": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer",
                    "example": 1
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.ReviewSchema"
                    }
                },
                "last_page": {
                    "type": "integer",
                    "example": 100
                },
                "per_page": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "schemas.SentGiftResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.SentGiftSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.SentGiftSchema": {
            "type": "object",
            "properties": {
                "claimed": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-06-05T02:32:34.462196+01:00"
                },
                "gift": {
                    "$ref": "#/definitions/schemas.GiftSchema"
                },
                "id": {
                    "type": "string",
                    "example": "2b3bd817-135e-41bd-9781-33807c92ff40"
                },
                "receiver": {
                    "$ref": "#/definitions/schemas.UserDataSchema"
                },
                "sender": {
                    "$ref": "#/definitions/schemas.UserDataSchema"
                }
            }
        },
        "schemas.SentGiftsResponseDataSchema": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer",
                    "example": 1
                },
                "gifts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.SentGiftSchema"
                    }
                },
                "last_page": {
                    "type": "integer",
                    "example": 100
                },
                "per_page": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "schemas.SentGiftsResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.SentGiftsResponseDataSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.SetNewPasswordSchema": {
            "type": "object",
            "required": [
                "password",
                "token_string"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 8,
                    "example": "newstrongpassword"
                },
                "token_string": {
                    "type": "string",
                    "example": "Z2ZBYWjwXGXtCin3QnnABCHVfys6bcGPH49GrJEMtFIDQcU9TVL1AURNItZoBcTowOOeQMHofbp6WTxpYPlucdUEImQNWzMtH0ll"
                }
            }
        },
        "schemas.SiteDetailResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.SiteDetail"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.SocialLoginSchema": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string",
                    "minLength": 10,
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6InNpbXBsZWlkIiwiZXhwIjoxMjU3ODk0MzAwfQ.Ys_jP70xdxch32hFECfJQuvpvU5_IiTIN2pJJv68EqQ"
                }
            }
        },
        "schemas.SubscriberResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Subscriber"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.SubscriptionPlanResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.SubscriptionPlanSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.SubscriptionPlanSchema": {
            "type": "object",
            "required": [
                "amount",
                "subtype"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                },
                "subtype": {
                    "$ref": "#/definitions/choices.SubscriptionTypeChoice"
                }
            }
        },
        "schemas.SubscriptionPlansResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.SubscriptionPlanSchema"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.TagSchema": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "schemas.TagsAddSchema": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "schemas.TagsResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.TagSchema"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.TokensResponseSchema": {
            "type": "object",
            "properties": {
                "access": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6InNpbXBsZWlkIiwiZXhwIjoxMjU3ODk0MzAwfQ.Ys_jP70xdxch32hFECfJQuvpvU5_IiTIN2pJJv68EqQ"
                },
                "account_type": {
                    "$ref": "#/definitions/choices.AccType"
                },
                "avatar": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-06-05T02:32:34.462196+01:00"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "followers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.FollowerData"
                    }
                },
                "followings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.FollowerData"
                    }
                },
                "last_name": {
                    "type": "string"
                },
                "refresh": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6InNpbXBsZWlkIiwiZXhwIjoxMjU3ODk0MzAwfQ.Ys_jP70xdxch32hFECfJQuvpvU5_IiTIN2pJJv68EqQ"
                },
                "stories_count": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "schemas.TransactionSchema": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number",
                    "example": 10.35
                },
                "amount_total": {
                    "type": "number",
                    "example": 30.35
                },
                "client_secret": {
                    "type": "string"
                },
                "coins": {
                    "type": "integer",
                    "example": 10
                },
                "coins_total": {
                    "type": "integer",
                    "example": 30
                },
                "created_at": {
                    "type": "string"
                },
                "payment_purpose": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/choices.PaymentPurpose"
                        }
                    ],
                    "example": "SUBSCRIPTION"
                },
                "payment_status": {
                    "$ref": "#/definitions/choices.PaymentStatus"
                },
                "payment_type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/choices.PaymentType"
                        }
                    ],
                    "example": "STRIPE"
                },
                "quantity": {
                    "type": "integer",
                    "example": 10
                },
                "reference": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "schemas.TransactionsResponseDataSchema": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer",
                    "example": 1
                },
                "last_page": {
                    "type": "integer",
                    "example": 100
                },
                "per_page": {
                    "type": "integer",
                    "example": 100
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.TransactionSchema"
                    }
                }
            }
        },
        "schemas.TransactionsResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.TransactionsResponseDataSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.UpdatePasswordSchema": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 8,
                    "example": "oldpassword"
                },
                "old_password": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 8,
                    "example": "newstrongpassword"
                }
            }
        },
        "schemas.UpdateUserProfileSchema": {
            "type": "object",
            "properties": {
                "username": {
                    "description": "Bio\t\t\t\t*string `json:\"bio\"`",
                    "type": "string",
                    "maxLength": 1000,
                    "minLength": 3,
                    "example": "john-doe"
                }
            }
        },
        "schemas.UpdateUserRoleSchema": {
            "type": "object",
            "properties": {
                "account_type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/choices.AccType"
                        }
                    ],
                    "example": "WRITER"
                }
            }
        },
        "schemas.UserDataSchema": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "full_name": {
                    "description": "For short user data",
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "schemas.UserProfile": {
            "type": "object",
            "properties": {
                "account_type": {
                    "$ref": "#/definitions/choices.AccType"
                },
                "avatar": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-06-05T02:32:34.462196+01:00"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "followers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.FollowerData"
                    }
                },
                "followings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.FollowerData"
                    }
                },
                "last_name": {
                    "type": "string"
                },
                "stories_count": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "schemas.UserProfileResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.UserProfile"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.UserProfilesResponseDataSchema": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer",
                    "example": 1
                },
                "last_page": {
                    "type": "integer",
                    "example": 100
                },
                "per_page": {
                    "type": "integer",
                    "example": 100
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.UserProfile"
                    }
                }
            }
        },
        "schemas.UserProfilesResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/schemas.UserProfilesResponseDataSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "schemas.VerifyEmailRequestSchema": {
            "type": "object",
            "required": [
                "token_string"
            ],
            "properties": {
                "token_string": {
                    "type": "string",
                    "example": "Z2ZBYWjwXGXtCin3QnnABCHVfys6bcGPH49GrJEMtFIDQcU9TVL1AURNItZoBcTowOOeQMHofbp6WTxpYPlucdUEImQNWzMtH0ll"
                }
            }
        },
        "schemas.WaitlistResponseSchema": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "utils.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type 'Bearer jwt_string' to correctly set the API Key",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "security": [
        {
            "BearerAuth": []
        }
    ]
}