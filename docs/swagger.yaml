basePath: /api/v1
consumes:
- application/json
definitions:
  choices.AccType:
    enum:
    - READER
    - AUTHOR
    type: string
    x-enum-varnames:
    - ACCTYPE_READER
    - ACCTYPE_AUTHOR
  choices.AgeType:
    enum:
    - 4
    - 12
    - 16
    - 18
    type: integer
    x-enum-varnames:
    - ATYPE_FOUR
    - ATYPE_TWELVE
    - ATYPE_SIXTEEN
    - ATYPE_EIGHTEEN
  choices.ContractIDTypeChoice:
    enum:
    - DRIVERS-LICENSE
    - GOVERNMENT-ID
    - PASSPORT
    type: string
    x-enum-varnames:
    - CID_DRIVERS_LICENSE
    - CID_GOVERNMENT_ID
    - CID_PASSPORT
  choices.ContractStatusChoice:
    enum:
    - PENDING
    - APPROVED
    - DECLINED
    - UPDATED
    type: string
    x-enum-varnames:
    - CTS_PENDING
    - CTS_APPROVED
    - CTS_DECLINED
    - CTS_UPDATED
  choices.ContractTypeChoice:
    enum:
    - EXCLUSIVE
    - NON-EXCLUSIVE
    - ONLY-EXCLUSIVE
    type: string
    x-enum-varnames:
    - CT_EXCLUSIVE
    - CT_NON_EXCLUSIVE
    - CT_ONLY_EXCLUSIVE
  choices.DeviceType:
    enum:
    - android
    - ios
    type: string
    x-enum-varnames:
    - DT_ANDROID
    - DT_IOS
  choices.NotificationTypeChoice:
    enum:
    - LIKE
    - REPLY
    - FOLLOWING
    - BOOK_PURCHASE
    - GIFT
    - REVIEW
    - VOTE
    type: string
    x-enum-varnames:
    - NT_LIKE
    - NT_REPLY
    - NT_FOLLOWING
    - NT_BOOK_PURCHASE
    - NT_GIFT
    - NT_REVIEW
    - NT_VOTE
  choices.PaymentPurpose:
    enum:
    - COINS
    - SUBSCRIPTION
    type: string
    x-enum-varnames:
    - PP_COINS
    - PP_SUB
  choices.PaymentStatus:
    enum:
    - PENDING
    - SUCCEEDED
    - FAILED
    - CANCELED
    type: string
    x-enum-varnames:
    - PSPENDING
    - PSSUCCEEDED
    - PSFAILED
    - PSCANCELED
  choices.PaymentType:
    enum:
    - GOOGLE PAY
    - STRIPE
    - PAYPAL
    type: string
    x-enum-varnames:
    - PTYPE_GPAY
    - PTYPE_STRIPE
    - PTYPE_PAYPAL
  choices.RatingChoice:
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    type: integer
    x-enum-varnames:
    - RC_1
    - RC_2
    - RC_3
    - RC_4
    - RC_5
  choices.ReplyType:
    enum:
    - REVIEW
    - PARAGRAPH_COMMENT
    type: string
    x-enum-varnames:
    - RT_REVIEW
    - RT_PARAGRAPH_COMMENT
  choices.SubscriptionTypeChoice:
    enum:
    - MONTHLY
    - ANNUAL
    type: string
    x-enum-varnames:
    - ST_MONTHLY
    - ST_ANNUAL
  models.SiteDetail:
    properties:
      address:
        example: 234, Lagos, Nigeria
        type: string
      email:
        example: litpad@gmail.com
        type: string
      fb:
        example: https://facebook.com
        type: string
      ig:
        example: https://instagram.com
        type: string
      name:
        type: string
      phone:
        example: "+234345434343"
        type: string
      tw:
        example: https://twitter.com
        type: string
      wh:
        example: https://wa.me/2348133831036
        type: string
    type: object
  models.Subscriber:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
    required:
    - email
    type: object
  routes.HealthCheckSchema:
    properties:
      success:
        example: pong
        type: string
    type: object
  schemas.AddToWaitlist:
    properties:
      email:
        example: johndoe@example.com
        type: string
      genre_slug:
        example: werewolf
        type: string
      name:
        example: John Doe
        maxLength: 1000
        minLength: 3
        type: string
    required:
    - email
    - genre_slug
    - name
    type: object
  schemas.BookDetailResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.BookDetailSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.BookDetailSchema:
    properties:
      age_discretion:
        $ref: '#/definitions/choices.AgeType'
      author:
        $ref: '#/definitions/schemas.UserDataSchema'
      avg_rating:
        type: number
      blurb:
        type: string
      chapter_price:
        type: integer
      chapters_count:
        type: integer
      cover_image:
        type: string
      created_at:
        example: "2024-06-05T02:32:34.462196+01:00"
        type: string
      full_price:
        type: integer
      genre:
        $ref: '#/definitions/schemas.GenreWithoutTagSchema'
      partial_view_chapter:
        $ref: '#/definitions/schemas.ChapterListSchema'
      reads:
        type: integer
      reviews:
        $ref: '#/definitions/schemas.ReviewsResponseDataSchema'
      section:
        $ref: '#/definitions/schemas.SectionSchema'
      slug:
        type: string
      sub_section:
        $ref: '#/definitions/schemas.SubSectionSchema'
      tags:
        items:
          $ref: '#/definitions/schemas.TagSchema'
        type: array
      title:
        type: string
      updated_at:
        example: "2024-06-05T02:32:34.462196+01:00"
        type: string
      votes:
        type: integer
    type: object
  schemas.BookReportSchema:
    properties:
      additional_explanation:
        maxLength: 1000
        type: string
      reason:
        maxLength: 1000
        type: string
    required:
    - reason
    type: object
  schemas.BookResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.BookSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.BookSchema:
    properties:
      age_discretion:
        $ref: '#/definitions/choices.AgeType'
      author:
        $ref: '#/definitions/schemas.UserDataSchema'
      avg_rating:
        type: number
      blurb:
        type: string
      chapter_price:
        type: integer
      chapters_count:
        type: integer
      cover_image:
        type: string
      created_at:
        example: "2024-06-05T02:32:34.462196+01:00"
        type: string
      full_price:
        type: integer
      genre:
        $ref: '#/definitions/schemas.GenreWithoutTagSchema'
      partial_view_chapter:
        $ref: '#/definitions/schemas.ChapterListSchema'
      reads:
        type: integer
      section:
        $ref: '#/definitions/schemas.SectionSchema'
      slug:
        type: string
      sub_section:
        $ref: '#/definitions/schemas.SubSectionSchema'
      tags:
        items:
          $ref: '#/definitions/schemas.TagSchema'
        type: array
      title:
        type: string
      updated_at:
        example: "2024-06-05T02:32:34.462196+01:00"
        type: string
      votes:
        type: integer
    type: object
  schemas.BookWithStats:
    properties:
      author_name:
        type: string
      avg_rating:
        type: number
      cover_image:
        type: string
      genre_name:
        type: string
      genre_slug:
        type: string
      reads_count:
        type: integer
      slug:
        type: string
      title:
        type: string
      votes_count:
        type: integer
    type: object
  schemas.BooksResponseDataSchema:
    properties:
      books:
        items:
          $ref: '#/definitions/schemas.BookSchema'
        type: array
      current_page:
        example: 1
        type: integer
      last_page:
        example: 100
        type: integer
      per_page:
        example: 100
        type: integer
    type: object
  schemas.BooksResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.BooksResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.BuyCoinSchema:
    properties:
      coin_id:
        example: 19e8bd22-fab1-4bb4-ba82-77c41bea6b99
        type: string
      quantity:
        description: PaymentType choices.PaymentType `json:"payment_type" validate:"required,payment_type_validator"
          example:"STRIPE"` // This should be stripe by default
        example: 2
        type: integer
    required:
    - coin_id
    - quantity
    type: object
  schemas.ChapterCreateSchema:
    properties:
      is_last:
        type: boolean
      paragraphs:
        items:
          type: string
        maxItems: 400
        type: array
      title:
        maxLength: 100
        type: string
    required:
    - paragraphs
    - title
    type: object
  schemas.ChapterDetailSchema:
    properties:
      paragraphs:
        items:
          $ref: '#/definitions/schemas.ParagraphSchema'
        type: array
      slug:
        type: string
      title:
        type: string
    type: object
  schemas.ChapterListSchema:
    properties:
      slug:
        type: string
      title:
        type: string
    type: object
  schemas.ChapterResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.ChapterDetailSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ChaptersResponseDataSchema:
    properties:
      chapters:
        items:
          $ref: '#/definitions/schemas.ChapterListSchema'
        type: array
      current_page:
        example: 1
        type: integer
      last_page:
        example: 100
        type: integer
      per_page:
        example: 100
        type: integer
    type: object
  schemas.ChaptersResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.ChaptersResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.CoinSchema:
    properties:
      amount:
        example: 5
        type: integer
      id:
        example: 19e8bd22-fab1-4bb4-ba82-77c41bea6b99
        type: string
      price:
        example: 10.45
        type: number
    type: object
  schemas.CoinsResponseSchema:
    properties:
      data:
        items:
          $ref: '#/definitions/schemas.CoinSchema'
        type: array
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.CommentSchema:
    properties:
      created_at:
        example: "2024-06-05T02:32:34.462196+01:00"
        type: string
      id:
        example: 2b3bd817-135e-41bd-9781-33807c92ff40
        type: string
      likes_count:
        type: integer
      replies_count:
        type: integer
      text:
        maxLength: 10000
        type: string
      updated_at:
        example: "2024-06-05T02:32:34.462196+01:00"
        type: string
      user:
        $ref: '#/definitions/schemas.UserDataSchema'
    required:
    - text
    type: object
  schemas.ContractResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.ContractSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ContractSchema:
    properties:
      address:
        type: string
      age:
        type: integer
      average_chapter:
        type: integer
      book_availability_link:
        type: string
      chapter_price:
        type: integer
      city:
        type: string
      contract_status:
        $ref: '#/definitions/choices.ContractStatusChoice'
      country:
        type: string
      email:
        type: string
      full_name:
        type: string
      full_price:
        type: integer
      full_purchase_mode:
        type: boolean
      id_back_image:
        type: string
      id_front_image:
        type: string
      id_type:
        $ref: '#/definitions/choices.ContractIDTypeChoice'
      intended_contract:
        $ref: '#/definitions/choices.ContractTypeChoice'
      pen_name:
        type: string
      planned_length:
        type: integer
      postal_code:
        type: string
      state:
        type: string
      telephone_number:
        type: string
      update_rate:
        type: integer
    type: object
  schemas.ContractsResponseDataSchema:
    properties:
      contracts:
        items:
          $ref: '#/definitions/schemas.ContractSchema'
        type: array
      current_page:
        example: 1
        type: integer
      last_page:
        example: 100
        type: integer
      per_page:
        example: 100
        type: integer
    type: object
  schemas.ContractsResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.ContractsResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.CreateICPWallet:
    properties:
      username:
        example: john-doe
        maxLength: 1000
        type: string
    required:
    - username
    type: object
  schemas.CreateSubscriptionSchema:
    properties:
      payment_method_token:
        type: string
      subtype:
        $ref: '#/definitions/choices.SubscriptionTypeChoice'
    required:
    - payment_method_token
    - subtype
    type: object
  schemas.DashboardResponseDataSchema:
    properties:
      active_subscribers:
        type: integer
      avatar:
        type: string
      books:
        items:
          $ref: '#/definitions/schemas.BookWithStats'
        type: array
      subscription_revenue:
        type: number
      total_users:
        type: integer
      user_growth_data:
        items:
          $ref: '#/definitions/schemas.UserGrowthData'
        type: array
      user_subscription_plan_percentages:
        $ref: '#/definitions/schemas.SubscriptionPlansAndPercentages'
      username:
        type: string
    type: object
  schemas.DashboardResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.DashboardResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.EmailRequestSchema:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
    required:
    - email
    type: object
  schemas.FollowerData:
    properties:
      account_type:
        $ref: '#/definitions/choices.AccType'
      avatar:
        type: string
      followers_count:
        type: integer
      name:
        type: string
      stories_count:
        type: integer
      username:
        type: string
    type: object
  schemas.GenreAddSchema:
    properties:
      name:
        type: string
      tag_slugs:
        items:
          type: string
        type: array
    required:
    - name
    type: object
  schemas.GenreSchema:
    properties:
      name:
        type: string
      slug:
        type: string
      tags:
        items:
          $ref: '#/definitions/schemas.TagSchema'
        type: array
    type: object
  schemas.GenreWithoutTagSchema:
    properties:
      name:
        type: string
      slug:
        type: string
    type: object
  schemas.GenresResponseSchema:
    properties:
      data:
        items:
          $ref: '#/definitions/schemas.GenreSchema'
        type: array
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.GiftSchema:
    properties:
      image:
        example: https://img.url
        type: string
      lanterns:
        example: 2
        type: integer
      name:
        example: Red rose
        type: string
      price:
        example: 500
        type: integer
      slug:
        example: red-rose
        type: string
    type: object
  schemas.GiftsResponseSchema:
    properties:
      data:
        items:
          $ref: '#/definitions/schemas.GiftSchema'
        type: array
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.InviteAdminSchema:
    properties:
      admin:
        type: boolean
      author:
        type: boolean
      email:
        type: string
    required:
    - admin
    - author
    - email
    type: object
  schemas.LoginResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.TokensResponseSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.LoginSchema:
    properties:
      email:
        example: johndoe@email.com
        type: string
      password:
        example: password
        type: string
    required:
    - email
    - password
    type: object
  schemas.NotificationBookSchema:
    properties:
      cover_image:
        type: string
      slug:
        type: string
      title:
        type: string
    type: object
  schemas.NotificationSchema:
    properties:
      book:
        allOf:
        - $ref: '#/definitions/schemas.NotificationBookSchema'
        description: Bought book, vote, comment and reply
      comment_id:
        description: reviewed, reply, like
        example: 2b3bd817-135e-41bd-9781-33807c92ff40
        type: string
      created_at:
        example: "2024-06-05T02:32:34.462196+01:00"
        type: string
      id:
        example: 2b3bd817-135e-41bd-9781-33807c92ff40
        type: string
      is_read:
        type: boolean
      ntype:
        $ref: '#/definitions/choices.NotificationTypeChoice'
      receiver_id:
        type: string
      sender:
        $ref: '#/definitions/schemas.UserDataSchema'
      sent_gift_id:
        description: If someone sent you a gift
        example: 2b3bd817-135e-41bd-9781-33807c92ff40
        type: string
      text:
        type: string
    type: object
  schemas.NotificationsResponseDataSchema:
    properties:
      current_page:
        example: 1
        type: integer
      last_page:
        example: 100
        type: integer
      notifications:
        items:
          $ref: '#/definitions/schemas.NotificationSchema'
        type: array
      per_page:
        example: 100
        type: integer
    type: object
  schemas.NotificationsResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.NotificationsResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ParagraphCommentAddSchema:
    properties:
      text:
        maxLength: 10000
        type: string
    required:
    - text
    type: object
  schemas.ParagraphCommentResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.CommentSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ParagraphCommentsResponseDataSchema:
    properties:
      comments:
        items:
          $ref: '#/definitions/schemas.CommentSchema'
        type: array
      current_page:
        example: 1
        type: integer
      last_page:
        example: 100
        type: integer
      per_page:
        example: 100
        type: integer
    type: object
  schemas.ParagraphCommentsResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.ParagraphCommentsResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ParagraphSchema:
    properties:
      comments_count:
        type: integer
      index:
        type: integer
      text:
        type: string
    type: object
  schemas.PaymentResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.TransactionSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ReadNotificationSchema:
    properties:
      id:
        example: d10dde64-a242-4ed0-bd75-4c759644b3a6
        type: string
      mark_all_as_read:
        example: false
        type: boolean
    type: object
  schemas.RefreshTokenSchema:
    properties:
      refresh:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6InNpbXBsZWlkIiwiZXhwIjoxMjU3ODk0MzAwfQ.Ys_jP70xdxch32hFECfJQuvpvU5_IiTIN2pJJv68EqQ
        type: string
    required:
    - refresh
    type: object
  schemas.RegisterResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.EmailRequestSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.RegisterUser:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
      password:
        example: strongpassword
        maxLength: 50
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  schemas.RepliesResponseDataSchema:
    properties:
      current_page:
        example: 1
        type: integer
      last_page:
        example: 100
        type: integer
      per_page:
        example: 100
        type: integer
      replies:
        items:
          $ref: '#/definitions/schemas.ReplySchema'
        type: array
    type: object
  schemas.RepliesResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.RepliesResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ReplyEditSchema:
    properties:
      text:
        maxLength: 10000
        type: string
    required:
    - text
    type: object
  schemas.ReplyResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.ReplySchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ReplyReviewOrCommentSchema:
    properties:
      text:
        maxLength: 10000
        type: string
      type:
        $ref: '#/definitions/choices.ReplyType'
    required:
    - text
    - type
    type: object
  schemas.ReplySchema:
    properties:
      created_at:
        example: "2024-06-05T02:32:34.462196+01:00"
        type: string
      id:
        example: 2b3bd817-135e-41bd-9781-33807c92ff40
        type: string
      likes_count:
        type: integer
      text:
        type: string
      updated_at:
        example: "2024-06-05T02:32:34.462196+01:00"
        type: string
      user:
        $ref: '#/definitions/schemas.UserDataSchema'
    type: object
  schemas.ResponseSchema:
    properties:
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ReviewBookSchema:
    properties:
      rating:
        $ref: '#/definitions/choices.RatingChoice'
      text:
        maxLength: 10000
        type: string
    required:
    - rating
    - text
    type: object
  schemas.ReviewResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.ReviewSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ReviewSchema:
    properties:
      created_at:
        example: "2024-06-05T02:32:34.462196+01:00"
        type: string
      id:
        example: 2b3bd817-135e-41bd-9781-33807c92ff40
        type: string
      likes_count:
        type: integer
      rating:
        $ref: '#/definitions/choices.RatingChoice'
      replies_count:
        type: integer
      text:
        maxLength: 10000
        type: string
      updated_at:
        example: "2024-06-05T02:32:34.462196+01:00"
        type: string
      user:
        $ref: '#/definitions/schemas.UserDataSchema'
    required:
    - rating
    - text
    type: object
  schemas.ReviewsResponseDataSchema:
    properties:
      current_page:
        example: 1
        type: integer
      items:
        items:
          $ref: '#/definitions/schemas.ReviewSchema'
        type: array
      last_page:
        example: 100
        type: integer
      per_page:
        example: 100
        type: integer
    type: object
  schemas.SectionSchema:
    properties:
      name:
        type: string
      slug:
        type: string
    type: object
  schemas.SectionWithSubsectionsSchema:
    properties:
      created_at:
        type: string
      name:
        type: string
      slug:
        type: string
      sub_sections:
        items:
          $ref: '#/definitions/schemas.SubSectionSchema'
        type: array
      sub_sections_count:
        type: integer
      updated_at:
        type: string
    type: object
  schemas.SectionsResponseSchema:
    properties:
      data:
        items:
          $ref: '#/definitions/schemas.SectionSchema'
        type: array
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.SectionsWithSubSectionsSchema:
    properties:
      data:
        items:
          $ref: '#/definitions/schemas.SectionWithSubsectionsSchema'
        type: array
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.SentGiftResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.SentGiftSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.SentGiftSchema:
    properties:
      claimed:
        type: boolean
      created_at:
        example: "2024-06-05T02:32:34.462196+01:00"
        type: string
      gift:
        $ref: '#/definitions/schemas.GiftSchema'
      id:
        example: 2b3bd817-135e-41bd-9781-33807c92ff40
        type: string
      receiver:
        $ref: '#/definitions/schemas.UserDataSchema'
      sender:
        $ref: '#/definitions/schemas.UserDataSchema'
    type: object
  schemas.SentGiftsResponseDataSchema:
    properties:
      current_page:
        example: 1
        type: integer
      gifts:
        items:
          $ref: '#/definitions/schemas.SentGiftSchema'
        type: array
      last_page:
        example: 100
        type: integer
      per_page:
        example: 100
        type: integer
    type: object
  schemas.SentGiftsResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.SentGiftsResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.SetNewPasswordSchema:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
      password:
        example: newstrongpassword
        maxLength: 50
        minLength: 8
        type: string
      token_string:
        example: Z2ZBYWjwXGXtCin3QnnABCHVfys6bcGPH49GrJEMtFIDQcU9TVL1AURNItZoBcTowOOeQMHofbp6WTxpYPlucdUEImQNWzMtH0ll
        type: string
    required:
    - email
    - password
    - token_string
    type: object
  schemas.SiteDetailResponseSchema:
    properties:
      data:
        $ref: '#/definitions/models.SiteDetail'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.SocialLoginSchema:
    properties:
      device_type:
        $ref: '#/definitions/choices.DeviceType'
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6InNpbXBsZWlkIiwiZXhwIjoxMjU3ODk0MzAwfQ.Ys_jP70xdxch32hFECfJQuvpvU5_IiTIN2pJJv68EqQ
        minLength: 10
        type: string
    required:
    - token
    type: object
  schemas.SubSectionBookResponseSchema:
    properties:
      current_page:
        example: 1
        type: integer
      items:
        items:
          $ref: '#/definitions/schemas.SubSectionBookSchema'
        type: array
      last_page:
        example: 100
        type: integer
      per_page:
        example: 100
        type: integer
    type: object
  schemas.SubSectionBookSchema:
    properties:
      author:
        $ref: '#/definitions/schemas.UserDataSchema'
      order_in_section:
        type: integer
      title:
        type: string
    type: object
  schemas.SubSectionSchema:
    properties:
      books_count:
        type: integer
      name:
        type: string
      slug:
        type: string
    type: object
  schemas.SubSectionWithBooksResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.SubSectionWithBooksSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.SubSectionWithBooksSchema:
    properties:
      books:
        $ref: '#/definitions/schemas.SubSectionBookResponseSchema'
      books_count:
        type: integer
      name:
        type: string
      section:
        type: string
      slug:
        type: string
    type: object
  schemas.SubSectionsResponseSchema:
    properties:
      data:
        items:
          $ref: '#/definitions/schemas.SubSectionSchema'
        type: array
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.SubscriberResponseSchema:
    properties:
      data:
        $ref: '#/definitions/models.Subscriber'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.SubscriptionPlanResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.SubscriptionPlanSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.SubscriptionPlanSchema:
    properties:
      amount:
        type: number
      subtype:
        $ref: '#/definitions/choices.SubscriptionTypeChoice'
    required:
    - amount
    - subtype
    type: object
  schemas.SubscriptionPlansAndPercentages:
    properties:
      annual:
        type: number
      free_tier:
        type: number
      monthly:
        type: number
    type: object
  schemas.SubscriptionPlansResponseSchema:
    properties:
      data:
        items:
          $ref: '#/definitions/schemas.SubscriptionPlanSchema'
        type: array
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.TagSchema:
    properties:
      name:
        type: string
      slug:
        type: string
    type: object
  schemas.TagsAddSchema:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  schemas.TagsResponseSchema:
    properties:
      data:
        items:
          $ref: '#/definitions/schemas.TagSchema'
        type: array
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.TokensResponseSchema:
    properties:
      access:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6InNpbXBsZWlkIiwiZXhwIjoxMjU3ODk0MzAwfQ.Ys_jP70xdxch32hFECfJQuvpvU5_IiTIN2pJJv68EqQ
        type: string
      account_type:
        $ref: '#/definitions/choices.AccType'
      avatar:
        type: string
      bio:
        type: string
      created_at:
        example: "2024-06-05T02:32:34.462196+01:00"
        type: string
      current_plan:
        $ref: '#/definitions/choices.SubscriptionTypeChoice'
      email:
        type: string
      followers:
        items:
          $ref: '#/definitions/schemas.FollowerData'
        type: array
      followings:
        items:
          $ref: '#/definitions/schemas.FollowerData'
        type: array
      is_following:
        type: boolean
      name:
        type: string
      refresh:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6InNpbXBsZWlkIiwiZXhwIjoxMjU3ODk0MzAwfQ.Ys_jP70xdxch32hFECfJQuvpvU5_IiTIN2pJJv68EqQ
        type: string
      stories_count:
        type: integer
      username:
        type: string
    type: object
  schemas.TransactionSchema:
    properties:
      amount:
        example: 10.35
        type: number
      amount_total:
        example: 30.35
        type: number
      client_secret:
        type: string
      coins:
        example: 10
        type: integer
      coins_total:
        example: 30
        type: integer
      created_at:
        type: string
      payment_purpose:
        allOf:
        - $ref: '#/definitions/choices.PaymentPurpose'
        example: SUBSCRIPTION
      payment_status:
        $ref: '#/definitions/choices.PaymentStatus'
      payment_type:
        allOf:
        - $ref: '#/definitions/choices.PaymentType'
        example: STRIPE
      quantity:
        example: 10
        type: integer
      reference:
        type: string
      updated_at:
        type: string
    type: object
  schemas.TransactionsResponseDataSchema:
    properties:
      current_page:
        example: 1
        type: integer
      last_page:
        example: 100
        type: integer
      per_page:
        example: 100
        type: integer
      transactions:
        items:
          $ref: '#/definitions/schemas.TransactionSchema'
        type: array
    type: object
  schemas.TransactionsResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.TransactionsResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.UpdatePasswordSchema:
    properties:
      new_password:
        example: oldpassword
        maxLength: 50
        minLength: 8
        type: string
      old_password:
        example: newstrongpassword
        maxLength: 50
        minLength: 8
        type: string
    required:
    - new_password
    - old_password
    type: object
  schemas.UpdateUserRoleSchema:
    properties:
      account_type:
        allOf:
        - $ref: '#/definitions/choices.AccType'
        example: WRITER
    type: object
  schemas.UserDataSchema:
    properties:
      avatar:
        type: string
      name:
        description: For short user data
        type: string
      username:
        type: string
    type: object
  schemas.UserGrowthData:
    properties:
      count:
        description: Number of new users
        type: integer
      period:
        description: e.g., "Jan 2025", "Week 1", etc.
        type: string
    type: object
  schemas.UserProfile:
    properties:
      account_type:
        $ref: '#/definitions/choices.AccType'
      avatar:
        type: string
      bio:
        type: string
      created_at:
        example: "2024-06-05T02:32:34.462196+01:00"
        type: string
      current_plan:
        $ref: '#/definitions/choices.SubscriptionTypeChoice'
      email:
        type: string
      followers:
        items:
          $ref: '#/definitions/schemas.FollowerData'
        type: array
      followings:
        items:
          $ref: '#/definitions/schemas.FollowerData'
        type: array
      is_following:
        type: boolean
      name:
        type: string
      stories_count:
        type: integer
      username:
        type: string
    type: object
  schemas.UserProfileResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.UserProfile'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.UserProfilesResponseDataSchema:
    properties:
      current_page:
        example: 1
        type: integer
      last_page:
        example: 100
        type: integer
      per_page:
        example: 100
        type: integer
      users:
        items:
          $ref: '#/definitions/schemas.UserProfile'
        type: array
    type: object
  schemas.UserProfilesResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.UserProfilesResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.VerifyEmailRequestSchema:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
      otp:
        example: 123456
        type: integer
    required:
    - email
    - otp
    type: object
  schemas.WaitlistResponseSchema:
    properties:
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      code:
        type: string
      data:
        additionalProperties:
          type: string
        type: object
      message:
        type: string
      status:
        type: string
    type: object
info:
  contact: {}
  description: |-
    ## LitPAD API built with Fiber and GORM

    ### WEBSOCKETS:

    #### Notifications

    - URL: `wss://{host}/api/v1/ws/notifications`

    - Requires authorization, so pass in the Bearer Authorization header.

    - You can only read and not send notification messages into this socket.
  title: LITPAD API
  version: "1.0"
paths:
  /admin:
    get:
      consumes:
      - application/json
      description: '`Retrieves minimal book data, counts and other metrics`'
      parameters:
      - description: User Growth to filter by in days
        enum:
        - 7
        - 30
        - 365
        in: query
        name: user_growth_filter
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved admin dashboard data
          schema:
            $ref: '#/definitions/schemas.DashboardResponseSchema'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Admin Dashboard
      tags:
      - Admin
  /admin/books:
    get:
      consumes:
      - application/json
      description: Retrieves a list of books with support for pagination and optional
        filtering based on book title.
      parameters:
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      - description: Title of the book to filter by
        in: query
        name: title
        type: string
      - description: name or username of the book author to filter by
        in: query
        name: name
        type: string
      - description: Filter by highest ratings
        in: query
        name: rating
        type: boolean
      - description: Filter by Genre slug
        in: query
        name: genre_slug
        type: string
      - description: Filter by Section slug
        in: query
        name: section_slug
        type: string
      - description: Filter by Tag slug
        in: query
        name: tag_slug
        type: string
      - description: Filter by Featured
        in: query
        name: featured
        type: boolean
      - description: Filter by Weekly Featured
        in: query
        name: weeklyFeatured
        type: boolean
      - description: Filter by Trending
        in: query
        name: trending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of books
          schema:
            $ref: '#/definitions/schemas.BooksResponseSchema'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Books with Pagination
      tags:
      - Admin | Books
  /admin/books/book-detail/{slug}:
    get:
      description: This endpoint allows an admin to view details of a book
      parameters:
      - default: 1
        description: Current Page (for reviews pagination)
        in: query
        name: page
        type: integer
      - description: Book slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.BookDetailResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: View Book Details
      tags:
      - Admin | Books
  /admin/books/by-username/{username}:
    get:
      consumes:
      - application/json
      description: Retrieves a list of a particular author books with support for
        pagination and optional filtering based on book title.
      parameters:
      - description: Username of the author
        in: path
        name: username
        required: true
        type: string
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      - description: Title of the book to filter by
        in: query
        name: title
        type: string
      - description: Filter by highest ratings
        in: query
        name: rating
        type: boolean
      - description: Filter by Genre slug
        in: query
        name: genre_slug
        type: string
      - description: Filter by Section slug
        in: query
        name: section_slug
        type: string
      - description: Filter by Tag slug
        in: query
        name: tag_slug
        type: string
      - description: Filter by Featured
        in: query
        name: featured
        type: boolean
      - description: Filter by Weekly Featured
        in: query
        name: weeklyFeatured
        type: boolean
      - description: Filter by Trending
        in: query
        name: trending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of books
          schema:
            $ref: '#/definitions/schemas.BooksResponseSchema'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Author Books with Pagination
      tags:
      - Admin | Books
  /admin/books/contracts:
    get:
      consumes:
      - application/json
      description: Retrieves a list of book contracts with support for pagination
        and optional filtering based on contract status.
      parameters:
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      - description: Name of the author to filter by
        in: query
        name: name
        type: string
      - description: status of the contract to filter by
        enum:
        - PENDING
        - APPROVED
        - DECLINED
        - UPDATED
        in: query
        name: contract_status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of book contracts
          schema:
            $ref: '#/definitions/schemas.ContractsResponseSchema'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Book Contracts with Pagination
      tags:
      - Admin | Books
  /admin/books/genres:
    post:
      consumes:
      - application/json
      description: Add a new genre to the app.
      parameters:
      - description: Genre
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.GenreAddSchema'
      produces:
      - application/json
      responses:
        "201":
          description: Genre Added Successfully
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add Genre
      tags:
      - Admin | Books
  /admin/books/genres/{slug}:
    delete:
      consumes:
      - application/json
      description: Delete a genre.
      parameters:
      - description: Genre slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Genre Deleted Successfully
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Genre
      tags:
      - Admin | Books
    put:
      consumes:
      - application/json
      description: Update a genre.
      parameters:
      - description: Genre slug
        in: path
        name: slug
        required: true
        type: string
      - description: Genre
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.GenreAddSchema'
      produces:
      - application/json
      responses:
        "200":
          description: Genre Updated Successfully
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Genre
      tags:
      - Admin | Books
  /admin/books/sections:
    get:
      consumes:
      - application/json
      description: Retrieve sections with sub sections.
      produces:
      - application/json
      responses:
        "200":
          description: Sections Retrieved Successfully
          schema:
            $ref: '#/definitions/schemas.SectionsWithSubSectionsSchema'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Sections
      tags:
      - Admin | Books
    post:
      consumes:
      - application/json
      description: Add a new book section to the app.
      parameters:
      - description: Section
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.TagsAddSchema'
      produces:
      - application/json
      responses:
        "201":
          description: Section Added Successfully
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add Section
      tags:
      - Admin | Books
  /admin/books/sections/{slug}:
    delete:
      consumes:
      - application/json
      description: Delete a book section.
      parameters:
      - description: Section slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Section Deleted Successfully
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Section
      tags:
      - Admin | Books
    put:
      consumes:
      - application/json
      description: Update a section.
      parameters:
      - description: Section slug
        in: path
        name: slug
        required: true
        type: string
      - description: Section
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.TagsAddSchema'
      produces:
      - application/json
      responses:
        "200":
          description: Section Updated Successfully
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Section
      tags:
      - Admin | Books
  /admin/books/sections/{slug}/subsections:
    post:
      consumes:
      - application/json
      description: Add a new book subsection to the app.
      parameters:
      - description: Section slug
        in: path
        name: slug
        required: true
        type: string
      - description: SubSection
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.TagsAddSchema'
      produces:
      - application/json
      responses:
        "201":
          description: Sub Section Added Successfully
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add SubSection
      tags:
      - Admin | Books
  /admin/books/subsections/{slug}:
    delete:
      consumes:
      - application/json
      description: Delete a book subsection.
      parameters:
      - description: SubSection slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: SubSection Deleted Successfully
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete SubSection
      tags:
      - Admin | Books
    get:
      consumes:
      - application/json
      description: Retrieve a single sub section.
      parameters:
      - description: Sub Section slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sub section Retrieved Successfully
          schema:
            $ref: '#/definitions/schemas.SubSectionWithBooksResponseSchema'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get A Sub Section
      tags:
      - Admin | Books
    put:
      consumes:
      - application/json
      description: Update a subsection.
      parameters:
      - description: SubSection slug
        in: path
        name: slug
        required: true
        type: string
      - description: SubSection
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.TagsAddSchema'
      produces:
      - application/json
      responses:
        "200":
          description: SubSection Updated Successfully
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update SubSection
      tags:
      - Admin | Books
  /admin/books/subsections/{slug}/add-book/{book_slug}:
    get:
      consumes:
      - application/json
      description: Add a book to a subsection.
      parameters:
      - description: SubSection slug
        in: path
        name: slug
        required: true
        type: string
      - description: Book slug
        in: path
        name: book_slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Book added to subsection successfully
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add Book To A SubSection
      tags:
      - Admin | Books
  /admin/books/subsections/{slug}/remove-book/{book_slug}:
    get:
      consumes:
      - application/json
      description: Remove a book from a subsection and adjust order of remaining books.
      parameters:
      - description: SubSection slug
        in: path
        name: slug
        required: true
        type: string
      - description: Book slug
        in: path
        name: book_slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Book removed from subsection successfully
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove Book From SubSection
      tags:
      - Admin | Books
  /admin/books/tags:
    post:
      consumes:
      - application/json
      description: Add a new tag to the app.
      parameters:
      - description: Tag
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.TagsAddSchema'
      produces:
      - application/json
      responses:
        "201":
          description: Tag added successfully
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add Tag
      tags:
      - Admin | Books
  /admin/books/tags/{slug}:
    delete:
      consumes:
      - application/json
      description: Delete a tag from the app.
      parameters:
      - description: Tag slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tag delete successfully
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Tag
      tags:
      - Admin | Books
    put:
      consumes:
      - application/json
      description: Update a tag to the app.
      parameters:
      - description: Tag slug
        in: path
        name: slug
        required: true
        type: string
      - description: Tag
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.TagsAddSchema'
      produces:
      - application/json
      responses:
        "200":
          description: Tag updated successfully
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Tag
      tags:
      - Admin | Books
  /admin/payments/plans:
    put:
      description: This endpoint allows an admin to change the amount of a plan
      parameters:
      - description: Plan data
        in: body
        name: plan
        required: true
        schema:
          $ref: '#/definitions/schemas.SubscriptionPlanSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SubscriptionPlanResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update A Plan Amount
      tags:
      - Wallet
  /admin/payments/transactions:
    get:
      consumes:
      - application/json
      description: Retrieves a list of current transactions with support for pagination
        and optional filtering based on username.
      parameters:
      - description: Username to filter by
        in: query
        name: username
        type: string
      - default: 1
        description: Current page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of transactions
          schema:
            $ref: '#/definitions/schemas.TransactionsResponseSchema'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Latest Transactions with Pagination
      tags:
      - Admin | Payments
  /admin/subscribers:
    get:
      consumes:
      - application/json
      description: Retrieves a list of subscribers with support for pagination and
        optional filtering based on user subscription type or status.
      parameters:
      - description: Subscription Type to filter by
        enum:
        - MONTHLY
        - ANNUAL
        in: query
        name: sub_type
        type: string
      - description: Subscription Status to filter by
        enum:
        - ACTIVE
        - EXPIRED
        in: query
        name: sub_status
        type: string
      - default: 1
        description: Current page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of user subs
          schema:
            $ref: '#/definitions/schemas.UserProfilesResponseSchema'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Subscribers with Pagination
      tags:
      - Admin | Subscribers
  /admin/users:
    get:
      consumes:
      - application/json
      description: Retrieves a list of user profiles with support for pagination and
        optional filtering based on user account type.
      parameters:
      - description: Type of user to filter by
        enum:
        - READER
        - WRITER
        - ADMIN
        in: query
        name: account_type
        type: string
      - default: 1
        description: Current page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of user profiles
          schema:
            $ref: '#/definitions/schemas.UserProfilesResponseSchema'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Users with Pagination
      tags:
      - Admin | Users
  /admin/users/{username}:
    put:
      consumes:
      - application/json
      description: Updates the account type of a specified user.
      parameters:
      - default: username
        description: Username
        in: path
        name: username
        required: true
        type: string
      - description: User role update data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateUserRoleSchema'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user details
          schema:
            $ref: '#/definitions/schemas.UserProfileResponseSchema'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update User Role
      tags:
      - Admin | Users
  /admin/users/{username}/toggle-activation:
    get:
      consumes:
      - application/json
      description: Allows the admin to deactivate/reactivate a user.
      parameters:
      - default: username
        description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Reactivate/Deactivate User
      tags:
      - Admin | Users
  /admin/users/admins/invite:
    post:
      consumes:
      - application/json
      description: Updates the account type of a specified user ot an admin and/or
        author.
      parameters:
      - description: Role update data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.InviteAdminSchema'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user details
          schema:
            $ref: '#/definitions/schemas.UserProfileResponseSchema'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Invite Admin
      tags:
      - Admin | Users
  /auth/facebook:
    post:
      description: |-
        `This endpoint generates new access and refresh tokens for authentication via facebook`
        `Pass in token gotten from facebook client authentication here in payload to retrieve tokens for authorization`
      parameters:
      - description: User login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.SocialLoginSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.LoginResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Login a user via facebook
      tags:
      - Auth
  /auth/google:
    post:
      description: |-
        `This endpoint generates new access and refresh tokens for authentication via google`
        `Pass in token gotten from gsi client authentication here in payload to retrieve tokens for authorization`
      parameters:
      - description: User login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.SocialLoginSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.LoginResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Login a user via google
      tags:
      - Auth
  /auth/login:
    post:
      description: This endpoint generates new access and refresh tokens for authentication
      parameters:
      - description: User login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.LoginSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.LoginResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Login a user
      tags:
      - Auth
  /auth/logout:
    get:
      description: This endpoint logs a user out from our application
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout a user
      tags:
      - Auth
  /auth/logout/all:
    get:
      description: This endpoint logs a user out from every device
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout a user from all devices
      tags:
      - Auth
  /auth/refresh:
    post:
      description: This endpoint refresh tokens by generating new access and refresh
        tokens for a user
      parameters:
      - description: Refresh token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/schemas.RefreshTokenSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.LoginResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Refresh tokens
      tags:
      - Auth
  /auth/register:
    post:
      description: '`This endpoint registers new users into our application.`'
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.RegisterUser'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.RegisterResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
  /auth/resend-verification-email:
    post:
      description: '`This endpoint resends new otp to the user''s email.`'
      parameters:
      - description: Email data
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/schemas.EmailRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Resend Verification Email
      tags:
      - Auth
  /auth/send-password-reset-link:
    post:
      description: '`This endpoint sends new password reset link to the user''s email.`'
      parameters:
      - description: Email object
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/schemas.EmailRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Send Password Reset Link
      tags:
      - Auth
  /auth/set-new-password:
    post:
      description: '`This endpoint verifies the password reset token and set new password.`'
      parameters:
      - description: Password reset object
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/schemas.SetNewPasswordSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Set New Password
      tags:
      - Auth
  /auth/verify-email:
    post:
      description: '`This endpoint verifies a user''s email.`'
      parameters:
      - description: Verify Email object
        in: body
        name: verify_email
        required: true
        schema:
          $ref: '#/definitions/schemas.VerifyEmailRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Verify a user's email
      tags:
      - Auth
  /auth/verify-password-reset-token/{token_string}:
    get:
      description: '`This endpoint checks the validity of a password reset token.`'
      parameters:
      - description: Token string
        in: path
        name: token_string
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Check Password Reset Token Validity
      tags:
      - Auth
  /books:
    get:
      description: This endpoint views a latest books
      parameters:
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      - description: Filter by Genre slug
        in: query
        name: genre_slug
        type: string
      - description: Filter by Section slug
        in: query
        name: section_slug
        type: string
      - description: Filter by Tag slug
        in: query
        name: tag_slug
        type: string
      - description: Filter by Featured
        in: query
        name: featured
        type: boolean
      - description: Filter by Weekly Featured
        in: query
        name: weeklyFeatured
        type: boolean
      - description: Filter by Trending
        in: query
        name: trending
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.BooksResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: View Latest Books
      tags:
      - Books
    post:
      description: This endpoint allows a writer to create a book
      parameters:
      - enum:
        - 4
        - 12
        - 16
        - 18
        in: formData
        name: age_discretion
        required: true
        type: integer
        x-enum-varnames:
        - ATYPE_FOUR
        - ATYPE_TWELVE
        - ATYPE_SIXTEEN
        - ATYPE_EIGHTEEN
      - in: formData
        maxLength: 200
        name: blurb
        required: true
        type: string
      - in: formData
        name: genre_slug
        required: true
        type: string
      - in: formData
        name: sub_section_slug
        required: true
        type: string
      - collectionFormat: csv
        in: formData
        items:
          type: string
        name: tag_slugs
        required: true
        type: array
      - in: formData
        maxLength: 200
        name: title
        required: true
        type: string
      - description: Cover Image to upload
        in: formData
        name: cover_image
        required: true
        type: file
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.BookResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create A Book
      tags:
      - Books
  /books/author/{username}:
    get:
      description: This endpoint views a latest books by an author
      parameters:
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      - description: Filter by Author Username
        in: path
        name: username
        required: true
        type: string
      - description: Filter by Genre slug
        in: query
        name: genre_slug
        type: string
      - description: Filter by Section slug
        in: query
        name: section_slug
        type: string
      - description: Filter by Tag slug
        in: query
        name: tag_slug
        type: string
      - description: Filter by Featured
        in: query
        name: featured
        type: boolean
      - description: Filter by Weekly Featured
        in: query
        name: weeklyFeatured
        type: boolean
      - description: Filter by Trending
        in: query
        name: trending
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.BooksResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: View Latest Books By A Particular Author
      tags:
      - Books
  /books/book/{slug}:
    delete:
      description: This endpoint allows a writer to delete a book
      parameters:
      - description: Book slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete A Book
      tags:
      - Books
    get:
      description: This endpoint views a single book
      parameters:
      - default: 1
        description: Current Page (for reviews pagination)
        in: query
        name: page
        type: integer
      - description: Book slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.BookDetailResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: View Single Book
      tags:
      - Books
    post:
      description: |-
        `This endpoint allows a user to review a book.`
        `The author cannot review his own book.`
        `Only the reader who has bought the book can review the book.`
        `A reader cannot add multiple reviews to a book.`
      parameters:
      - description: Book slug
        in: path
        name: slug
        required: true
        type: string
      - description: Review object
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/schemas.ReviewBookSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.ReviewResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Review A Book
      tags:
      - Books
    put:
      description: This endpoint allows a writer to update a book
      parameters:
      - description: Book slug
        in: path
        name: slug
        required: true
        type: string
      - enum:
        - 4
        - 12
        - 16
        - 18
        in: formData
        name: age_discretion
        required: true
        type: integer
        x-enum-varnames:
        - ATYPE_FOUR
        - ATYPE_TWELVE
        - ATYPE_SIXTEEN
        - ATYPE_EIGHTEEN
      - in: formData
        maxLength: 200
        name: blurb
        required: true
        type: string
      - in: formData
        name: genre_slug
        required: true
        type: string
      - in: formData
        name: sub_section_slug
        required: true
        type: string
      - collectionFormat: csv
        in: formData
        items:
          type: string
        name: tag_slugs
        required: true
        type: array
      - in: formData
        maxLength: 200
        name: title
        required: true
        type: string
      - description: Cover Image to upload
        in: formData
        name: cover_image
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.BookResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update A Book
      tags:
      - Books
  /books/book/{slug}/add-chapter:
    post:
      description: |-
        `This endpoint allows a writer to add a chapter to his/her book`
        `Chapter status: DRAFT, PUBLISHED, TRASH`
      parameters:
      - description: Book slug
        in: path
        name: slug
        required: true
        type: string
      - description: Chapter object
        in: body
        name: chapter
        required: true
        schema:
          $ref: '#/definitions/schemas.ChapterCreateSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.ChapterResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add A Chapter to a Book
      tags:
      - Books
  /books/book/{slug}/bookmark:
    get:
      description: This endpoint allows a user to bookmark a book
      parameters:
      - description: Book slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bookmark A Book
      tags:
      - Books
  /books/book/{slug}/chapters:
    get:
      description: |-
        `This endpoint views chapters of a book`
        `A Guest user will view just the first chapter`
        `An Authenticated user will view all the chapters if he's subscribed or he gets only the first chapter`
        `The owner will view all chapters of the book`
      parameters:
      - description: Get Chapter by Book Slug
        in: path
        name: slug
        required: true
        type: string
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ChaptersResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: View Book Chapters
      tags:
      - Books
  /books/book/{slug}/report:
    post:
      description: This endpoint allows a user to report a book
      parameters:
      - description: Book slug
        in: path
        name: slug
        required: true
        type: string
      - description: Report object
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/schemas.BookReportSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Report A Book
      tags:
      - Books
  /books/book/{slug}/set-contract:
    post:
      description: '`This endpoint allows a user to create/update a contract for his/her
        book`'
      parameters:
      - description: Book slug
        in: path
        name: slug
        required: true
        type: string
      - in: formData
        maxLength: 1000
        name: address
        required: true
        type: string
      - in: formData
        name: age
        required: true
        type: integer
      - in: formData
        name: average_chapter
        required: true
        type: integer
      - in: formData
        name: book_availability_link
        type: string
      - in: formData
        maxLength: 1000
        name: city
        required: true
        type: string
      - in: formData
        maxLength: 1000
        name: country
        required: true
        type: string
      - in: formData
        name: email
        required: true
        type: string
      - in: formData
        maxLength: 1000
        name: full_name
        required: true
        type: string
      - in: formData
        name: full_purchase_mode
        type: boolean
      - enum:
        - DRIVERS-LICENSE
        - GOVERNMENT-ID
        - PASSPORT
        in: formData
        name: id_type
        required: true
        type: string
        x-enum-varnames:
        - CID_DRIVERS_LICENSE
        - CID_GOVERNMENT_ID
        - CID_PASSPORT
      - enum:
        - EXCLUSIVE
        - NON-EXCLUSIVE
        - ONLY-EXCLUSIVE
        in: formData
        name: intended_contract
        required: true
        type: string
        x-enum-varnames:
        - CT_EXCLUSIVE
        - CT_NON_EXCLUSIVE
        - CT_ONLY_EXCLUSIVE
      - in: formData
        maxLength: 1000
        name: pen_name
        required: true
        type: string
      - in: formData
        name: planned_length
        required: true
        type: integer
      - in: formData
        name: postal_code
        required: true
        type: string
      - in: formData
        maxLength: 1000
        name: state
        required: true
        type: string
      - in: formData
        maxLength: 20
        name: telephone_number
        required: true
        type: string
      - in: formData
        name: update_rate
        required: true
        type: integer
      - description: Front Image of your id
        in: formData
        name: id_front_image
        type: file
      - description: Back Image of your id
        in: formData
        name: id_back_image
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ContractResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Set Contract
      tags:
      - Books
  /books/book/{slug}/vote:
    get:
      description: This endpoint allows a user to vote a book
      parameters:
      - description: Book slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Vote A Book
      tags:
      - Books
  /books/book/chapter/{slug}:
    delete:
      description: This endpoint allows a writer to delete a chapter from a book
      parameters:
      - description: Chapter slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete A Chapter
      tags:
      - Books
    put:
      description: |-
        `This endpoint allows a writer to update a chapter in his/her book`
        `Chapter status: DRAFT, PUBLISHED, TRASH`
      parameters:
      - description: Chapter slug
        in: path
        name: slug
        required: true
        type: string
      - description: Chapter object
        in: body
        name: chapter
        required: true
        schema:
          $ref: '#/definitions/schemas.ChapterCreateSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ChapterResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update A Chapter of a Book
      tags:
      - Books
  /books/book/chapters/chapter/{slug}:
    get:
      description: |-
        `This endpoint views a single chapter of a book`
        `An inactive subscriber can only view the chapter if its the first one`
      parameters:
      - description: Get Chapter by Slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ChapterResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: View Book Chapter
      tags:
      - Books
  /books/book/chapters/chapter/{slug}/paragraph/{index}/comments:
    get:
      description: |-
        `This endpoint view comments of a single paragraph of a chapter`
        `An inactive subscriber can only view the paragraph comment if its the first one`
      parameters:
      - description: Chapter Slug
        in: path
        name: slug
        required: true
        type: string
      - description: Paragraph Index
        in: path
        name: index
        required: true
        type: integer
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ParagraphCommentsResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: View Comments Of A Paragraph of A Chapter
      tags:
      - Books
    post:
      description: '`This endpoint allows a user to add a comment in a paragraph to
        a book chapter.`'
      parameters:
      - description: Chapter slug
        in: path
        name: slug
        required: true
        type: string
      - description: Paragraph Index of the chapter
        in: path
        name: index
        required: true
        type: integer
      - description: Paragraph Comment object
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/schemas.ParagraphCommentAddSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.ParagraphCommentResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add A Comment To A Paragraph In A Book Chapter
      tags:
      - Books
  /books/book/chapters/chapter/comment/{id}:
    get:
      description: '`This endpoint allows a user to like/unlike a comment or a reply
        (a kind of toggle)`'
      parameters:
      - description: Comment or reply id (uuid)
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Like/Unlike A Comment/Reply
      tags:
      - Books
  /books/book/chapters/chapter/paragraph-comment/{id}:
    delete:
      description: '`This endpoint allows a user to delete his/her paragraph comment.`'
      parameters:
      - description: Review id (uuid)
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Paragraph Comment
      tags:
      - Books
    put:
      description: '`This endpoint allows a user to edit his/her paragraph comment.`'
      parameters:
      - description: Comment id (uuid)
        in: path
        name: id
        required: true
        type: string
      - description: Comment object
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/schemas.ParagraphCommentAddSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ParagraphCommentResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Edit Paragraph Comment
      tags:
      - Books
  /books/book/review-or-paragraph-comment/{id}/replies:
    post:
      description: '`This endpoint allows a user to reply a book review.`'
      parameters:
      - description: Review or Paragraph Comment id (uuid)
        in: path
        name: id
        required: true
        type: string
      - description: Reply object
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/schemas.ReplyReviewOrCommentSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.ReplyResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Reply A Review Or A Paragraph Comment
      tags:
      - Books
  /books/book/review-or-paragraph-comment/replies/{id}:
    delete:
      description: '`This endpoint allows a user to delete his/her reply`'
      parameters:
      - description: Reply id (uuid)
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete A Reply
      tags:
      - Books
    put:
      description: '`This endpoint allows a user to edit his/her reply`'
      parameters:
      - description: Reply id (uuid)
        in: path
        name: id
        required: true
        type: string
      - description: Reply object
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/schemas.ReplyEditSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ReplyResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Edit A Reply
      tags:
      - Books
  /books/book/review/{id}:
    delete:
      description: '`This endpoint allows a user to delete his/her book review.`'
      parameters:
      - description: Review id (uuid)
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Book Review
      tags:
      - Books
    put:
      description: '`This endpoint allows a user to edit his/her book review.`'
      parameters:
      - description: Review id (uuid)
        in: path
        name: id
        required: true
        type: string
      - description: Review object
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/schemas.ReviewBookSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ReviewResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Edit Book Review
      tags:
      - Books
  /books/book/review/{id}/replies:
    get:
      description: '`This endpoint returns replies of a book review or paragraph comment`'
      parameters:
      - description: Comment/Review id (uuid)
        in: path
        name: id
        required: true
        type: string
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.RepliesResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get Comment/Review Replies
      tags:
      - Books
  /books/bookmarked:
    get:
      description: This endpoint allows a user to view his/her bookmarked books
      parameters:
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.BooksResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: View Bookmarked Books
      tags:
      - Books
  /books/genres:
    get:
      description: This endpoint views available book genres
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.GenresResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: View Available Book Genres
      tags:
      - Books
  /books/lanterns-generation/{amount}:
    get:
      description: This endpoint allows a user to convert coins to lanterns
      parameters:
      - description: Amount to convert
        in: path
        name: amount
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Convert Coins To Lanterns
      tags:
      - Books
  /books/sections:
    get:
      description: This endpoint views available book sections
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SectionsResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: View Available Book Sections
      tags:
      - Books
  /books/sub-sections:
    get:
      description: This endpoint views available book sub sections
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SubSectionsResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: View Available Book Sub Sections
      tags:
      - Books
  /books/tags:
    get:
      description: This endpoint views available book tags
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.TagsResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: View Available Book Tags
      tags:
      - Books
  /general/site-detail:
    get:
      description: This endpoint retrieves few details of the site/application.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SiteDetailResponseSchema'
      summary: Retrieve site details
      tags:
      - General
  /general/subscribe:
    post:
      description: This endpoint creates a newsletter subscriber in our application
      parameters:
      - description: Subscriber object
        in: body
        name: subscriber
        required: true
        schema:
          $ref: '#/definitions/models.Subscriber'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.SubscriberResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Add a subscriber
      tags:
      - General
  /gifts:
    get:
      description: This endpoint shows a user gifts that can be sent
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.GiftsResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: View All Available Gifts
      tags:
      - Gifts
  /gifts/{username}/{gift_slug}/send/:
    get:
      description: This endpoint allows a user to send a gift
      parameters:
      - description: Username of the writer
        in: path
        name: username
        required: true
        type: string
      - description: Slug of the gift being sent
        in: path
        name: gift_slug
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.SentGiftResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Send Gift
      tags:
      - Gifts
  /gifts/sent:
    get:
      description: This endpoint allows a writer to view all gifts that was sent to
        him/her
      parameters:
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      - description: 'Filter by claimed value: CLAIMED or NOT_CLAIMED '
        in: query
        name: claimed
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SentGiftsResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: View All Gifts Sent To A Writer
      tags:
      - Gifts
  /gifts/sent/{id}/claim:
    get:
      description: This endpoint allows a writer to claim a gift
      parameters:
      - description: ID of the sent gift (uuid)
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SentGiftResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Claim Gift
      tags:
      - Gifts
  /healthcheck:
    get:
      description: This endpoint checks the health of our application.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.HealthCheckSchema'
      summary: HealthCheck
      tags:
      - HealthCheck
  /profiles/notifications:
    get:
      description: This endpoint allows a user to view his/her notificatios
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.NotificationsResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: View Notifications
      tags:
      - Profiles
  /profiles/notifications/read:
    post:
      description: This endpoint allows a user to read his/her notification.
      parameters:
      - description: Notification Read object
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/schemas.ReadNotificationSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Read Notification
      tags:
      - Profiles
  /profiles/profile/{username}:
    get:
      description: This endpoint views a user profile
      parameters:
      - description: Username of user
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserProfileResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: View User Profile
      tags:
      - Profiles
  /profiles/profile/{username}/follow:
    get:
      description: '`This endpoint allows a user to follow or unfollow a writer`.'
      parameters:
      - description: Username of the user to follow or unfollow
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Returns an error for invalid request parameters.
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Returns an error when trying to follow a user that isn't a
            writer
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Returns an error when either the user to follow or the follower
            user does not exist.
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Returns an error when there is an internal server error or
            a transaction fails.
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Toggle Follow Status
      tags:
      - Profiles
  /profiles/update:
    patch:
      description: This endpoint updates a user's profile
      parameters:
      - example: I'm here to read good books
        in: formData
        maxLength: 1000
        minLength: 3
        name: bio
        type: string
      - example: John Doe
        in: formData
        maxLength: 1000
        minLength: 3
        name: name
        type: string
      - example: johndoe
        in: formData
        maxLength: 1000
        minLength: 3
        name: username
        type: string
      - description: Avatar Image to upload
        in: formData
        name: avatar
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserProfileResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update User Profile
      tags:
      - Profiles
  /profiles/update-password:
    put:
      description: This endpoint updates a user's password
      parameters:
      - description: Password object
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdatePasswordSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update User Password
      tags:
      - Profiles
  /waitlist:
    post:
      consumes:
      - application/json
      description: Adds a user to the waitlist.
      parameters:
      - description: Waitlist data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.AddToWaitlist'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added to waitlist
          schema:
            $ref: '#/definitions/schemas.WaitlistResponseSchema'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Invalid Genre ID
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add to Waitlist
      tags:
      - Waitlist
  /wallet/coins:
    get:
      description: This endpoint returns all available coins for sale
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.CoinsResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: View Available Coins
      tags:
      - Wallet
    post:
      description: This endpoint allows a user to buy coins
      parameters:
      - description: Payment object
        in: body
        name: coin
        required: true
        schema:
          $ref: '#/definitions/schemas.BuyCoinSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.PaymentResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Buy Coins
      tags:
      - Wallet
  /wallet/icp:
    post:
      description: '`This endpoint creates a new ICP wallet`'
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateICPWallet'
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Create a new ICP wallet
      tags:
      - Wallet
  /wallet/icp/{username}/balance:
    get:
      description: This endpoint returns user ICP wallet balance
      parameters:
      - description: Username of user
        in: path
        name: username
        required: true
        type: string
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get user ICP wallet balance
      tags:
      - Wallet
  /wallet/icp/gifts/{username}/{gift_slug}/send/:
    get:
      description: This endpoint allows a user to send a gift via ICP
      parameters:
      - description: Username of the writer
        in: path
        name: username
        required: true
        type: string
      - description: Slug of the gift being sent
        in: path
        name: gift_slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SentGiftResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Send Gift Via ICP
      tags:
      - Wallet
  /wallet/plans:
    get:
      consumes:
      - application/json
      description: Retrieves a list of available subscription plans.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of plans
          schema:
            $ref: '#/definitions/schemas.SubscriptionPlansResponseSchema'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: List Available Subscription Plans
      tags:
      - Wallet
  /wallet/subscription:
    post:
      description: This endpoint allows a user to create a subscription for books
      parameters:
      - description: Payment object
        in: body
        name: subscription
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateSubscriptionSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.PaymentResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Subscribe
      tags:
      - Wallet
  /wallet/transactions:
    get:
      description: This endpoint returns all transactions of a user
      parameters:
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      - description: Payment Status
        in: query
        name: payment_status
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.TransactionsResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: View Current Transactions
      tags:
      - Wallet
produces:
- application/json
security:
- BearerAuth: []
securityDefinitions:
  BearerAuth:
    description: Type 'Bearer jwt_string' to correctly set the API Key
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
