basePath: /api/v1
consumes:
- application/json
definitions:
  models.SiteDetail:
    properties:
      address:
        example: 234, Lagos, Nigeria
        type: string
      email:
        example: litpad@gmail.com
        type: string
      fb:
        example: https://facebook.com
        type: string
      ig:
        example: https://instagram.com
        type: string
      name:
        type: string
      phone:
        example: "+234345434343"
        type: string
      tw:
        example: https://twitter.com
        type: string
      wh:
        example: https://wa.me/2348133831036
        type: string
    type: object
  models.Subscriber:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
    required:
    - email
    type: object
  routes.HealthCheckSchema:
    properties:
      success:
        example: pong
        type: string
    type: object
  schemas.EmailRequestSchema:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
    required:
    - email
    type: object
  schemas.LoginSchema:
    properties:
      email:
        example: johndoe@email.com
        type: string
      password:
        example: password
        type: string
    required:
    - email
    - password
    type: object
  schemas.RefreshTokenSchema:
    properties:
      refresh:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6InNpbXBsZWlkIiwiZXhwIjoxMjU3ODk0MzAwfQ.Ys_jP70xdxch32hFECfJQuvpvU5_IiTIN2pJJv68EqQ
        type: string
    required:
    - refresh
    type: object
  schemas.RegisterResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.EmailRequestSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.RegisterUser:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
      first_name:
        example: John
        maxLength: 50
        type: string
      last_name:
        example: Doe
        maxLength: 50
        type: string
      password:
        example: strongpassword
        maxLength: 50
        minLength: 8
        type: string
      terms_agreement:
        type: boolean
      username:
        example: john-doe
        maxLength: 1000
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
  schemas.ResponseSchema:
    properties:
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.SetNewPasswordSchema:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
      otp:
        example: 123456
        type: integer
      password:
        example: newstrongpassword
        maxLength: 50
        minLength: 8
        type: string
    required:
    - email
    - otp
    - password
    type: object
  schemas.SiteDetailResponseSchema:
    properties:
      data:
        $ref: '#/definitions/models.SiteDetail'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.SubscriberResponseSchema:
    properties:
      data:
        $ref: '#/definitions/models.Subscriber'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.UpdatePasswordSchema:
    properties:
      newPassword:
        example: newstrongpassword
        maxLength: 50
        minLength: 8
        type: string
      oldPassword:
        example: newstrongpassword
        maxLength: 50
        minLength: 8
        type: string
    required:
    - newPassword
    - oldPassword
    type: object
  schemas.UpdateUserProfileSchema:
    properties:
      username:
        description: "Bio\t\t\t\t*string `json:\"bio\"`"
        example: john-doe
        maxLength: 1000
        type: string
    type: object
  schemas.VerifyEmailRequestSchema:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
      otp:
        example: 123456
        type: integer
    required:
    - email
    - otp
    type: object
  utils.ErrorResponse:
    properties:
      code:
        type: string
      data:
        additionalProperties:
          type: string
        type: object
      message:
        type: string
      status:
        type: string
    type: object
info:
  contact: {}
  description: '`LitPAD API built with Fiber and GORM`'
  title: LITPAD API
  version: "4.0"
paths:
  /auth/login:
    post:
      description: This endpoint generates new access and refresh tokens for authentication
      parameters:
      - description: User login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.LoginSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - GuestUserAuth: []
      summary: Login a user
      tags:
      - Auth
  /auth/logout:
    get:
      description: This endpoint logs a user out from our application
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout a user
      tags:
      - Auth
  /auth/refresh:
    post:
      description: This endpoint refresh tokens by generating new access and refresh
        tokens for a user
      parameters:
      - description: Refresh token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/schemas.RefreshTokenSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Refresh tokens
      tags:
      - Auth
  /auth/register:
    post:
      description: '`This endpoint registers new users into our application.`'
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.RegisterUser'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.RegisterResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
  /auth/resend-verification-email:
    post:
      description: '`This endpoint resends new otp to the user''s email.`'
      parameters:
      - description: Email data
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/schemas.EmailRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Resend Verification Email
      tags:
      - Auth
  /auth/send-password-reset-otp:
    post:
      description: '`This endpoint sends new password reset otp to the user''s email.`'
      parameters:
      - description: Email object
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/schemas.EmailRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Send Password Reset Otp
      tags:
      - Auth
  /auth/set-new-password:
    post:
      description: '`This endpoint verifies the password reset otp.`'
      parameters:
      - description: Password reset object
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/schemas.SetNewPasswordSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Set New Password
      tags:
      - Auth
  /auth/verify-email:
    post:
      description: '`This endpoint verifies a user''s email.`'
      parameters:
      - description: Verify Email object
        in: body
        name: verify_email
        required: true
        schema:
          $ref: '#/definitions/schemas.VerifyEmailRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Verify a user's email
      tags:
      - Auth
  /general/site-detail:
    get:
      description: This endpoint retrieves few details of the site/application.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SiteDetailResponseSchema'
      summary: Retrieve site details
      tags:
      - General
  /general/subscribe:
    post:
      description: This endpoint creates a newsletter subscriber in our application
      parameters:
      - description: Subscriber object
        in: body
        name: subscriber
        required: true
        schema:
          $ref: '#/definitions/models.Subscriber'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.SubscriberResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Add a subscriber
      tags:
      - General
  /healthcheck:
    get:
      description: This endpoint checks the health of our application.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.HealthCheckSchema'
      summary: HealthCheck
      tags:
      - HealthCheck
  /profiles/profile/{username}:
    get:
      description: This endpoint views a user profile
      parameters:
      - description: Username of user
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: View User Profile
      tags:
      - Profiles
  /profiles/update:
    patch:
      description: This endpoint updates a user's profile
      parameters:
      - description: Profile object
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateUserProfileSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update User Profile
      tags:
      - Profiles
  /profiles/update-password:
    put:
      description: This endpoint updates a user's password
      parameters:
      - description: Password object
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdatePasswordSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update User Password
      tags:
      - Profiles
produces:
- application/json
securityDefinitions:
  BearerAuth:
    description: Type 'Bearer jwt_string' to correctly set the API Key
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
